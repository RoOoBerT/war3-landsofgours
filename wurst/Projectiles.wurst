package Projectiles

// Standard imports
import ClosureTimers
//import DamageDetection
//import Effect
import Fx
//import HashMap
import LinkedList
//import Player
//import RegisterEvents
//import EventHelper

// Custom imports

/** Projectiles impact check frequency */
@configurable public constant real PROJECTILES_UPDATE_PERIOD = ANIMATION_PERIOD

@configurable public constant string EFFECT_PATH = "Abilities\\Spells\\Other\\Charm\\CharmTarget.mdl"

/** Interface for receiving projectile impact events */
public interface ImpactHandler
    function onImpact(Projectile projectile, vec3 impactPoint) returns boolean

/** A projectile object which can be followed over time and emits a notification upon impact */
public class Projectile
    constant Fx fx
    constant ImpactHandler impactHandler
    constant vec3 dest
    constant real speed

    constant unit emitter

    real epp

    static constant LinkedList<Projectile> LIST = new LinkedList<Projectile>

    construct(vec3 origin, vec3 dest, ImpactHandler impactHandler, unit emitter, string effectPath, real speed, real scale)
        this.fx = new Fx(origin, effectPath)
        this.impactHandler = impactHandler
        this.dest = dest
        this.speed = speed

        this.emitter = emitter
        
        // Register projectile
        LIST.add(this)

        this.epp = origin.distanceTo(dest) * 0.5

        // Move effect
        fx.setScale(scale)
        fx.getDummy()
            //..setMoveSpeed(speed)
            //..issuePointOrder("move", dest.toVec2())
    
    function getPos() returns vec2
        return this.fx.getDummy().getPos()

    ondestroy
        destroy this.fx
    
    /** Update the projectile position and returns true if it exploded */
    function move() returns boolean
        vec2 pos = this.getPos()
        let dist = this.speed * PROJECTILES_UPDATE_PERIOD

        // Check ground position
        let groundAngle = pos.angleTo(this.dest.toVec2())
        this.fx.setXYAngle(groundAngle)
        let groundVector = groundAngle.direction(dist)
        let groundPos = pos.op_plus(groundVector)
        this.fx.setXY(groundPos)

        // Set Z
        this.epp -= this.speed * PROJECTILES_UPDATE_PERIOD
        this.fx.setZ(this.fx.getZ() + this.epp)

        // Check impact
        //Log.trace("Projectile pos : " + pos.toString() + " -> target " + projectile.dest.toString())
        if pos.distanceToSq(this.dest.toVec2()) <= (32 * 32)
            // Boom !
            if this.impactHandler != null
                this.impactHandler.onImpact(this, this.dest)
            return true
        
        // Not destroyed
        return false
    

init
    Log.trace("Init projectiles")
    
    // Periodically check impacted projectiles
    doPeriodically(PROJECTILES_UPDATE_PERIOD) cb ->
        let iter = Projectile.LIST.iterator()
        while iter.hasNext()
            Projectile projectile = iter.next()
            
            if projectile.move()
                destroy projectile
                iter.remove()
