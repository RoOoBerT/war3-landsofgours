package Bows

// Standard imports
import ItemType

// Custom imports
import ItemTypeArrows
import ItemTypeBow
import PlayerData
import Projectiles
import Sounds

// Bows API
/** Find the first usable bow of the unit (if any) */
function findBow(unit whichUnit) returns ItemInstance
    ItemFilter bowFilter = (ItemType itemType, item itm) -> itemType instanceof ItemTypeBow
    return ItemType.findFirstItem(whichUnit, bowFilter)

/** Find the first usable arrows of the unit (if any) */
function findArrows(unit whichUnit) returns ItemInstance
    ItemFilter arrowsFilter = (ItemType itemType, item itm) -> itemType instanceof ItemTypeArrows
    return ItemType.findFirstItem(whichUnit, arrowsFilter)

/** Creates an attack from attacker to target unit using the specified arrows type */
public function generateArrowFromUnit(unit attacker, unit target, ItemTypeArrows arrows)
    // Generate arrow effect
    let sourcePoint = attacker.getPos3Real() + vec3(0, 0, 64)
    let targetPoint = target.getPos3Real() + vec3(0, 0, 64)

    // Impact handler
    ImpactHandler impactHandler = (Projectile projectile, vec3 impactPoint) ->
        addEffect(EFFECT_PATH, impactPoint)
        return true

    if not arrows.isFollowUnit()
        new StandardProjectile(attacker, arrows.getEffectPath(), sourcePoint)
            ..setDestination(targetPoint)
            ..setSpeed(600)
            ..setArc(arrows.getArc())
            ..setImpactHandler(impactHandler)
            ..launch()
    else
        new FollowingProjectile(attacker, arrows.getEffectPath(), sourcePoint, target)
            ..setImpactHandler(impactHandler)
            ..setSpeed(600)
            ..launch()

/** Called when a unit attacks another unit with a bow */
public function onUnitAttackWithBow(unit attacker, unit target)
    //Log.trace("Unit is attacked by an archer : " + archer.getName())
    player owner = GetOwningPlayer(attacker)

    // Cancel this event's damage because real damage will be dealt later by the projectile(s)
    BlzSetEventDamage(0)

    // Check if the attacker has a bow
    ItemInstance bow = findBow(attacker)
    if bow != null
        // Check if the attacker has ammo
        ItemInstance arrowsObj = findArrows(attacker)
        if arrowsObj != null
            int charges = arrowsObj.itm.getCharges() - 1
            if charges > 0
                // Consume one arrow
                arrowsObj.itm.setCharges(charges)
            else
                // Empty arrows stack
                arrowsObj.itm.remove()
            
            // Create one attack
            //Log.trace("Archer " + archer.getName() + " uses " + bow.itm.getName() + " with " + arrowsObj.itm.getName())
            generateArrowFromUnit(attacker, target, arrowsObj.itemType castTo ItemTypeArrows)
            
            // Cancel attack
            //attacker.interruptAttack()
        else
            attacker.issueImmediateOrder("stop")
            if owner == localPlayer
                displayMessage(MessageType.ERROR, owner, 3.0, "Vous avec besoin de flèches pour utiliser " + bow.itm.getName() + " !")
                PlaySound(Sounds.error)
    else
        attacker.issueImmediateOrder("stop")
        if owner == localPlayer
            displayMessage(MessageType.ERROR, owner, 3, "Vous devez équiper un arc pour attaquer !")
            PlaySound(Sounds.error)
        
