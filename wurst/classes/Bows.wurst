package Bows

// Standard imports
//import ClosureTimers
//import DamageDetection
//import Effect
//import HashMap
import ItemType
//import Player
import RegisterEvents
//import EventHelper

// Custom imports
import CharacterClass
import ItemTypeArrows
import ItemTypeBow
import PlayerData
import Projectiles

// Bows API
/** Find the first usable bow of the unit (if any) */
function findBow(unit whichUnit) returns ItemInstance
    ItemFilter bowFilter = (ItemType itemType, item itm) -> itemType instanceof ItemTypeBow
    return ItemType.findFirstItem(whichUnit, bowFilter)

/** Find the first usable arrows of the unit (if any) */
function findArrows(unit whichUnit) returns ItemInstance
    ItemFilter arrowsFilter = (ItemType itemType, item itm) -> itemType instanceof ItemTypeArrows
    return ItemType.findFirstItem(whichUnit, arrowsFilter)

init
    // Bow handling
    Log.debug("Bows initialization...")

    /* TODO
<FrottyZ> see DamageDetection package
<FrottyZ> addOnDamageFunc */
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED) ->
        unit archer = GetAttacker()
        player owner = GetOwningPlayer(archer)
        unit targetUnit = GetTriggerUnit()
        if archer.getAbilityLevel(CharacterClass.ARCHER.abil) > 0
            //Log.trace("Unit is attacked by an archer : " + archer.getName())

            // Check if the attacker has a bow
            ItemInstance bow = findBow(archer)
            if bow != null
                // Check if the attacker has ammo
                ItemInstance arrowsObj = findArrows(archer)
                if arrowsObj != null
                    int charges = arrowsObj.itm.getCharges() - 1
                    if (charges > 0)
                        // Consume one arrow
                        arrowsObj.itm.setCharges(charges)
                    else
                        // Empty arrows stack
                        arrowsObj.itm.remove()
                    
                    // Generate arrow effect
                    ItemTypeArrows arrows = arrowsObj.itemType castTo ItemTypeArrows
                    let sourcePoint = archer.getPos3Real()
                    let targetPoint = targetUnit.getPos3Real()
                    
                    //Log.trace("Archer " + archer.getName() + " uses " + bow.itm.getName() + " with " + arrowsObj.itm.getName())
                    
                    // Impact handler
                    ImpactHandler impactHandler = (Projectile projectile, vec3 impactPoint) ->
                        addEffect(EFFECT_PATH, impactPoint)
                        return true
                    
                    if not arrows.isFollowUnit()
                        new StandardProjectile(archer, arrows.getEffectPath(), sourcePoint)
                            ..setDestination(targetPoint)
                            ..setSpeed(600)
                            ..setArc(arrows.getArc())
                            ..setImpactHandler(impactHandler)
                            ..launch()
                    else
                        new FollowingProjectile(archer, arrows.getEffectPath(), sourcePoint, targetUnit)
                            ..setImpactHandler(impactHandler)
                            ..setSpeed(600)
                            ..launch()
                    
                    // Cancel attack
                    archer.interruptAttack()
                else
                    displayMessage(MessageType.ERROR, owner, 3.0, "Vous avec besoin de flèches pour utiliser " + bow.itm.getName() + " !")
                    //archer.issueImmediateOrder(ORDER_STOP)
                    archer.interruptAttack()
            else
                displayMessage(MessageType.ERROR, owner, 3, "Vous devez équiper un arc pour attaquer !")
                //archer.issueImmediateOrder(ORDER_STOP)
                archer.interruptAttack()

