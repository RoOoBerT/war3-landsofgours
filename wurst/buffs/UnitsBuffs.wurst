package UnitsBuffs

// Standard imports
import GameTimer
import HashList
import LinkedList

// Custom imports
import public BuffType
import BuffTypesImpl
import CreatureStats
import DilatableTime
import Dummies
import Memory

constant real BUFF_ENDTIME_NEVER = 0.0

/** The duration of a buff which does not expire automatically */
public constant real BUFF_DURATION_INFINITE = 0.0

/** The ID of a buff that can be stacked multiple times */
public constant int BUFF_ID_STACKABLE = 0

/** Represents a currently active buff on a unit */
public class UnitBuff
    static int REF_COUNTER = 0

    private constant BuffType buffType
    private constant unit target
    private real beginTime = 0.0
    private real endTime = BUFF_ENDTIME_NEVER

    real lastEffectTime = 0.0
    effect lastEffect = null

    ///** To put to true to remove the buff */
    //private boolean stop = false

    construct(BuffType buffType, unit target, real duration)
        REF_COUNTER++
        this.buffType = buffType
        this.target = target
        this.beginTime = TimeDilatation.getModifiedTime(this.target.getPos3Real())
        if duration != BUFF_DURATION_INFINITE
            this.endTime = this.beginTime + duration

    // Accessors
    function getBuffType() returns BuffType
        return this.buffType

    function isInfinite() returns boolean
        return this.endTime == BUFF_ENDTIME_NEVER

    function isFinished() returns boolean
        boolean finished = this.endTime != BUFF_ENDTIME_NEVER and TimeDilatation.getModifiedTime(target.getPos3Real()) >= this.endTime
        if finished and this.buffType == BUFF_TEST
            Log.debug("A test buff is finished : begun at " + this.beginTime.toString() + " and ended at " + this.endTime.toString())
        return finished

    ondestroy
        REF_COUNTER--
        if lastEffect != null
            lastEffect.destr()

    static function getMemoryUsage() returns memoryUsage
        return memoryUsage("UnitBuff", REF_COUNTER, -1)

/** Represents the list of buffs currently linked to a unit */
public class UnitBuffs
    static int REF_COUNTER = 0

    private constant unit who
    constant LinkedList<UnitBuff> buffs = new LinkedList<UnitBuff>()
    private constant HashList<int> buffsById = new HashList<int>()

    /** Contains the total of all modifiers for this unit */
    private constant CreatureStats totalStatsAdded = new CreatureStats()

    /** Contains the total of all modifiers for this unit */
    private constant CreatureStats totalStatsAddedPercent = new CreatureStats()

    construct(unit who)
        REF_COUNTER++
        if isDummyUnit(who)
            Log.error("Buff(s) handled for dummy unit ! Pinging position !" )
            PingMinimap(who.getX(), who.getY(), 5.0)
        this.who = who

    ondestroy
        REF_COUNTER--
        for unitBuff in this.buffs
            destroy unitBuff
        destroy this.buffs
        destroy this.buffsById
        destroy this.totalStatsAdded
        destroy this.totalStatsAddedPercent

    function addBuff(BuffType buffType, real duration) returns boolean
        // Security test for debugging
        if buffType.id == BUFF_ID_STACKABLE and duration == BUFF_DURATION_INFINITE
            Log.error("Infinite duration buff with id 0 ! How is it supposed to be removed later ?! : " + buffType.name)

        // Is the buff stackable ?
        int id = buffType.id
        if id != BUFF_ID_STACKABLE
            // Non stackable buff : is it already present ?
            if this.buffsById.has(id)
                // Unit is already affected
                // FIXME -> Update existing buff(s) ??
                return false
            else
                // Non stackable buff to add
                this.buffsById.add(id)
        else
            // The buff is stackable, just add it (do not list the ID which is 0)

        UnitBuff newBuff = new UnitBuff(buffType, this.who, duration)
        this.buffs.add(newBuff)
        this.totalStatsAdded.modifyAdd(buffType.getAddedStatsModifiers())
        this.totalStatsAddedPercent.modifyAdd(buffType.getAddedPercentStatsModifiers())

        // Is there an effect to show periodically ?
        if buffType.effectPath.isNotBlank()
            newBuff.lastEffect = this.who.addEffect(buffType.effectPath, buffType.effectAttachPoint)

        // Is there a buff icon to show on the unit ?
        if buffType.abilityId != 0
            this.who.addAbility(buffType.abilityId)

        return true

    function hasBuffByType(BuffType buffType) returns boolean
        // Non-stackable buff ?
        if buffType.id != BUFF_ID_STACKABLE
            return this.buffsById.has(buffType.id)

        // Stackable buff
        let iter = this.buffs.iterator()
        while iter.hasNext()
            let unitBuffs = iter.next()
            if unitBuffs.getBuffType().id == buffType.id
                return true

        if buffType == BUFF_TEST
            Log.debug("Unit has " + this.buffs.size().toString() + " buffs but not this one : " + buffType.name)
        
        return false

    function removeBuffByType(BuffType buffType) returns boolean
        boolean change = false

        // Is the buff stackable ?
        int id = buffType.id
        if id != BUFF_ID_STACKABLE
            // Non stackable buff : is it already present ?
            if this.buffsById.has(id)
                // Find the (only) buff and remove it
                this.buffsById.remove(id)
                let iter = this.buffs.iterator()
                while iter.hasNext()
                    let unitBuff = iter.next()
                    if unitBuff.getBuffType().id == id
                        destroy unitBuff
                        iter.remove()
                        this.totalStatsAdded.modifySubtract(unitBuff.getBuffType().getAddedStatsModifiers())
                        this.totalStatsAddedPercent.modifySubtract(unitBuff.getBuffType().getAddedPercentStatsModifiers())
                        change = true
                        break
            else
                // Buff not present : nothing to do
                return false
        else
            // The buff is stackable, remove all instances
            let iter = this.buffs.iterator()
            while iter.hasNext()
                let unitBuff = iter.next()
                if unitBuff.getBuffType().id == buffType.id
                    this.buffsById.remove(unitBuff.getBuffType().id)
                    iter.remove()
                    this.totalStatsAdded.modifySubtract(unitBuff.getBuffType().getAddedStatsModifiers())
                    this.totalStatsAddedPercent.modifySubtract(unitBuff.getBuffType().getAddedPercentStatsModifiers())
                    change = true

        // Is there a buff icon to hide ?
        if buffType.abilityId != 0
            this.who.removeAbility(buffType.abilityId)
        return change

    function update() returns boolean
        let iter = this.buffs.iterator()
        while iter.hasNext()
            let unitBuff = iter.next()

            // Has this buff finished ?
            if unitBuff.isFinished()
                iter.remove()
                this.totalStatsAdded.modifySubtract(unitBuff.getBuffType().getAddedStatsModifiers())
                this.totalStatsAddedPercent.modifySubtract(unitBuff.getBuffType().getAddedPercentStatsModifiers())

                //Log.trace("Buff disappeared from unit '" + this.who.getName() + "' : '" + unitBuff.getBuffType().name + "'")
                int id = unitBuff.getBuffType().id
                if id != BUFF_ID_STACKABLE
                    this.buffsById.remove(id)

                // Remove ability
                int abilityId = unitBuff.getBuffType().abilityId
                if abilityId != 0
                    this.who.removeAbility(abilityId)
                
                destroy unitBuff
            else
                // Buff not finished : Is there an effect to show periodically ?
                let buffType = unitBuff.getBuffType()
                if buffType.effectPeriod != 0.0
                    let currentTime = getElapsedGameTime()
                    if currentTime - unitBuff.lastEffectTime >= buffType.effectPeriod
                        unitBuff.lastEffectTime = currentTime

                        // Show effect
                        this.who.addEffect(buffType.effectPath, buffType.effectAttachPoint).destr()

        // Return true if this unit has no more buffs
        return this.buffs.size() == 0

    // Accessors
    function getTotalStatsAdded() returns CreatureStats
        return this.totalStatsAdded

    function getTotalStatsAddedPercent() returns CreatureStats
        return this.totalStatsAddedPercent

    function getUnit() returns unit
        return this.who

