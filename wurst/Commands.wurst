package Commands

// Standard imports
import HashMap
import LinkedList
import StringUtils

// Custom imports
import Adventure
import Musics
import PlayerData
import Spells
import WizardSpell

// Parameters
@configurable public string COMMANDS_CHAR = "-"
@configurable public boolean COMMANDS_CHEATS = false

// Constants
constant playerevent EVENT_PLAYER_CHAT_FILTER = ConvertPlayerEvent(96)

/** Defines available commands */
abstract class Command
    boolean cheat
    string keyword
    string syntax
    string description

    private construct(boolean cheat, string keyword, string syntax, string description)
        this.cheat = cheat
        this.keyword = keyword.toLowerCase()
        this.syntax = syntax
        this.description = description
        LIST.add(this)
        MAP.put(this.keyword, this)
    
    /** A player is allowed to cheat if he is the first player OR if cheats are globally enabled */
    static function isAllowedCheating(player who) returns boolean
        return COMMANDS_CHEATS or who == players[0]

    abstract function onCall(player who, LinkedList<string> params)
    
    static constant LinkedList<Command> LIST = new LinkedList<Command>
    static constant HashMap<string, Command> MAP = new HashMap<string, Command>

    static constant HELP = new CommandHelp()
    static constant ADVENTURES = new CommandAdventures()
    static constant ADVENTURE_START = new CommandAdventureStart()
    static constant CHEATS = new CommandCheats()
    static constant DEBUG = new CommandDebug()
    static constant MUSIC = new CommandMusic()
    static constant SPELLBOOK = new CommandSpellBook()
    static constant SPELL_LEARN = new CommandSpellLearn()

class CommandHelp extends Command
    construct()
        super(false, "help", "-help", "Show the list of available commands")
    
    override function onCall(player who, LinkedList<string> params)
        ClearTextMessages()

        // Should cheating commands be listed ?
        boolean cheatsAllowed = Command.isAllowedCheating(who)
        if cheatsAllowed
            displayMessage(MessageType.INFO, who, 30, "Listing all commands available (including cheats)")
        else
            displayMessage(MessageType.INFO, who, 30, "Listing all commands available to you (excluding cheats)")
        
        // List the commands
        for Command command in Command.LIST
            if not command.cheat or cheatsAllowed
                string message = "|c00ff4040{0}|r | {1}\n{2}".format(
                    command.keyword, command.syntax, command.description)
                displayMessage(MessageType.INFO, who, 30, message)

class CommandAdventures extends Command
    construct()
        super(false, "adventures", "-adventures [<index>]", "Affiche des informations sur les aventures")
    
    override function onCall(player who, LinkedList<string> params)
        // Show a specific spell ?
        string index = params.removeAt(0)
        if index.isNotBlank()
            // Display one specific spell
            Adventure adventure = AdventureManager.LIST.get(index.toInt())
            if adventure != null
                showAdventure(who, adventure)
            else
                displayMessage(MessageType.ERROR, who, 5, "Aventure inconnue <" + index + ")>")
        else
            // List all available adventures
            displayMessage(MessageType.INFO, who, 5, "Listing des aventures disponibles")
            for Adventure adventure in AdventureManager.LIST
                showAdventure(who, adventure)
    
    static function showAdventure(player who, Adventure adventure)
        string message = "#{0} - |c00ff4040{1}|r - {2}}".format(
            adventure.getIndex().toString(), adventure.getName(), adventure.getDescription())
        displayMessage(MessageType.INFO, who, 15, message)

class CommandAdventureStart extends Command
    construct()
        super(false, "start", "-start [<index>]", "Démarre une aventure donnée (ou choisie aléatoirement)")
    
    override function onCall(player who, LinkedList<string> params)
        // Show a specific spell ?
        string index = params.removeAt(0)
        if index.isNotBlank()
            // Start one specific adventure
            Adventure adventure = AdventureManager.LIST.get(index.toInt())
            if adventure != null
                AdventureManager.run(adventure)
            else
                displayMessage(MessageType.ERROR, who, 5, "Aventure inconnue <" + index + ")>")
        else
            // List all available adventures
            AdventureManager.runRandom()
    
    static function showAdventure(player who, Adventure adventure)
        string message = "#{0} - |c00ff4040{1}|r - {2}}".format(
            adventure.getIndex().toString(), adventure.getName(), adventure.getDescription())
        displayMessage(MessageType.INFO, who, 15, message)

class CommandCheats extends Command
    construct()
        super(false, "cheats", "-cheats [true|false]", "Afficher/modifier les autorisations de triche")

    override function onCall(player who, LinkedList<string> params)
        // Enable/disable cheats
        if not params.isEmpty()
            COMMANDS_CHEATS = params.removeAt(0).toBool()
        
        // Show current cheats status
        displayMessage(MessageType.INFO, who, 30, "Activation des codes de triche : " + COMMANDS_CHEATS.toString())

class CommandDebug extends Command
    construct()
        super(false, "debug", "-debug [TRACE|DEBUG|INFO|WARNING|ERROR]", "Modifier le niveau de traces")

    override function onCall(player who, LinkedList<string> params)
        // Update debug level
        if not params.isEmpty()
            string level = params.removeAt(0).toLowerCase()
            switch level
                case "trace"
                    Log.setLevel(Loglevel.TRACE)
                case "debug"
                    Log.setLevel(Loglevel.DEBUG)
                case "info"
                    Log.setLevel(Loglevel.INFO)
                case "warning"
                    Log.setLevel(Loglevel.WARNING)
                case "error"
                    Log.setLevel(Loglevel.ERROR)
                default
                    displayMessage(MessageType.ERROR, who, 15.0, "Niveau de traces invalide : " + level)
                    Log.setLevel(Loglevel.TRACE)
        
        // Show current debug level
        displayMessage(MessageType.INFO, who, 15, "Niveau de traces actuel : " + DEBUG_LEVEL.getTag())

class CommandMusic extends Command
    construct()
        super(false, "music", "-music [startpool]", "Modifier la musique en cours")

    override function onCall(player who, LinkedList<string> params)
        if not params.isEmpty()
            string param = params.removeAt(0).toLowerCase()
            switch param
                case "dragon"
                    Music.MUSIC_BGII_DRAGON.loopMusic(true)
                default
                    displayMessage(MessageType.ERROR, who, 15.0, "Musique inconnue : " + param)
        
class CommandSpellBook extends Command
    construct()
        super(false, "spellbook", "-spellbook [<index>]", "Affiche la liste des sorts de mage")
    
    override function onCall(player who, LinkedList<string> params)
        // Show a specific spell ?
        string index = params.removeAt(0)
        if index.isNotBlank()
            // Display one specific spell
            Spell spell = Spell.MAP.get(index.toInt())
            if spell != null
                showSpell(who, spell)
            else
                displayMessage(MessageType.SUCCESS, who, 5, "Aventure inconnue <" + index + ">")
        else
            // List all available spell(s)
            for Spell spell in Spell.LIST
                showSpell(who, spell)
    
    static function showSpell(player who, Spell spell)
        if spell instanceof WizardSpell
            int index = Spell.LIST.indexOf(spell)
            WizardSpell wizardSpell = spell castTo WizardSpell
            string message = "#{1} - {2} - |c00ff4040{0}|r - Niveaux 1-{3}".format(
                GetAbilityName(wizardSpell.abilityId), I2S(index), wizardSpell.school.getColoredName(), I2S(wizardSpell.maxLevel))
            displayMessage(MessageType.INFO, who, 15, message)

class CommandSpellLearn extends Command
    construct()
        super(true, "learn", "-learn [<index> [<level>]]", "Apprend un sort de magicien")
    
    override function onCall(player who, LinkedList<string> params)
        // Learn what spell ?
        string strIndex = params.removeAt(0)
        if strIndex != null and strIndex.isNotBlank()
            int index = strIndex.toInt()
            if index >= 0 and index < Spell.LIST.size()
                Spell spell = Spell.LIST.get(index)

                // At what level ?
                int level = 1
                if not params.isEmpty()
                    level = params.removeAt(0).toInt()
                
                // Get player hero
                unit hero = PlayerData.get(who.getId()).getCharacter()
                if level > 0
                    if level <= spell.maxLevel
                        // Add ability at level
                        hero.addAbility(spell.abilityId)
                        hero.setAbilityLevel(spell.abilityId, level)
                        displayMessage(MessageType.SUCCESS, who, 5, "Apprentissage du sort {0} au niveau {1}".format(
                            GetAbilityName(spell.abilityId), I2S(level)))
                    else
                        displayMessage(MessageType.ERROR, who, 5, "Niveau invalide pour ce sort {0}. Attendu : 1-{1}".format(
                            GetAbilityName(spell.abilityId), I2S(spell.maxLevel)))
                else
                    // Remove ability
                    hero.removeAbility(spell.abilityId)
                    displayMessage(MessageType.SUCCESS, who, 5, "Sort oublie : " + GetAbilityName(spell.abilityId))
            else
                displayMessage(MessageType.ERROR, who, 5, "Sort inconnu " + strIndex)
        else
            displayMessage(MessageType.ERROR, who, 5, "Specifiez un index de sort")

// Initialization
init
    // Create a trigger to listen to text messages from all players
    trigger chatListener = CreateTrigger()
    PlayerData.ACTIVE_PLAYERS.forEach() p ->
        chatListener.registerPlayerChatEvent(p, COMMANDS_CHAR, false)
    chatListener.addAction() ->
        string text = GetEventPlayerChatString().trim()
        player typer = GetTriggerPlayer()
        
        Log.trace("Message received from " + typer.getName() + " : " + text)
        
        // Is the message a command ?
        if text.isNotBlank() and text.startsWith(COMMANDS_CHAR)
            // Parse the substrings
            LinkedList<string> params = text.split(" ")
            if not params.isEmpty()
                // Is this an available command ?
                string keyword = params.removeAt(0).substring(COMMANDS_CHAR.length()).toLowerCase()
                Command cmd = Command.MAP.get(keyword)
                if cmd != null
                    if not cmd.cheat or Command.isAllowedCheating(typer)
                        Log.trace("Call command : " + cmd.keyword + " with " + I2S(params.size()) + " parameters")
                        cmd.onCall(typer, params)
                    else
                        // Command refused (cheat) : notify players for fun
                        displayMessage(MessageType.ERROR, typer, 5, "Vous n'avez pas le droit d'utiliser la commande " + cmd.keyword + " (triche) !")
                        displayMessage(MessageType.PLAYER, null, 5, "{0} a essayé de tricher avec la commande {1} !".format(typer.getName(), cmd.keyword))
                else
                    displayMessage(MessageType.ERROR, typer, 5, "Commande inconnue <" + keyword + ">. Essayez '-help'.")
            else
                Log.error("Failure splitting text into parameters : <" + text + ">")
