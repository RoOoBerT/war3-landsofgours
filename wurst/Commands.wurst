package Commands

// Standard imports
import HashMap
import LinkedList
import RegisterEvents
import StringUtils

// Custom imports
import Initialization
import Spells

// Parameters
@configurable public string COMMANDS_CHAR = "!"
@configurable public boolean COMMANDS_CHEATS = false

// Constants
constant playerevent EVENT_PLAYER_CHAT_FILTER = ConvertPlayerEvent(96)

/** Defines available commands */
abstract class Command
    boolean cheat
    string keyword
    string syntax
    string description

    construct(boolean cheat, string keyword, string syntax, string description)
        this.cheat = cheat
        this.keyword = keyword.toLowerCase()
        this.syntax = syntax
        this.description = description
        LIST.add(this)
        MAP.put(this.keyword, this)
    
    /** A player is allowed to cheat if he is the first player OR if cheats are globally enabled */
    static function isAllowedCheating(player who) returns boolean
        return COMMANDS_CHEATS or who == players[0]

    abstract function onCall(player who, LinkedList<string> params)
    
    static constant LinkedList<Command> LIST = new LinkedList<Command>
    static constant HashMap<string, Command> MAP = new HashMap<string, Command>

    static constant HELP = new CommandHelp()
    static constant SPELLBOOK = new CommandSpellBook()
    static constant SPELL_LEARN = new CommandSpellLearn()

class CommandHelp extends Command
    construct()
        super(false, "help", "-help", "Show the list of available commands")
    
    override function onCall(player who, LinkedList<string> params)
        ClearTextMessages()

        // Should cheating commands be listed ?
        boolean cheatsAllowed = Command.isAllowedCheating(who)
        if cheatsAllowed
            DisplayTimedTextToPlayer(who, 0, 0, 15.0, "Listing all commands available (including cheats)")
        else
            DisplayTimedTextToPlayer(who, 0, 0, 15.0, "Listing all commands available to you (excluding cheats)")
        
        // List the commands
        for Command command in Command.LIST
            if not command.cheat or cheatsAllowed
                string message = "|c00ff4040{0}|r | {1}\n{2}".format(
                    command.keyword, command.syntax, command.description)
                DisplayTimedTextToPlayer(who, 0, 0, 60.0, message)

class CommandSpellBook extends Command
    construct()
        super(false, "spellbook", "-spellbook [<index>]", "Show the list of available wizard spells")
    
    override function onCall(player who, LinkedList<string> params)
        // Show a specific spell ?
        string abilityId = params.removeAt(0)
        if abilityId.isNotBlank()
            // Display one specific spell
            Spell spell = Spell.SPELLS_MAP.get(abilityId.toAbilityId())
            if spell != null
                showSpell(who, spell)
            else
                DisplayTimedTextToPlayer(who, 0, 0, 5, "Sort inconnu <" + abilityId + " (" + I2S(abilityId.toAbilityId()) + ")>")
        else
            // List all available spell(s)
            for Spell spell in Spell.SPELLS_LIST
                showSpell(who, spell)
    
    static function showSpell(player who, Spell spell)
        if spell instanceof WizardSpell
            int index = Spell.SPELLS_LIST.indexOf(spell)
            WizardSpell wizardSpell = spell castTo WizardSpell
            string message = "|c00ff4040{0}|r ({1}) - {2} - Niveaux 1-{3}".format(
                AbilityId2String(wizardSpell.abilityId), I2S(index), wizardSpell.school.getColoredName(), I2S(wizardSpell.maxLevel))
            DisplayTimedTextToPlayer(who, 0, 0, 15.0, message)

class CommandSpellLearn extends Command
    construct()
        super(true, "learn", "-learn [<index> [<level>]]", "Learn a spell")
    
    override function onCall(player who, LinkedList<string> params)
        // Learn what spell ?
        string strIndex = params.removeAt(0)
        if strIndex != null and strIndex.isNotBlank()
            int index = strIndex.toInt()
            if index >= 0 and index < Spell.SPELLS_LIST.size()
                Spell spell = Spell.SPELLS_LIST.get(index)

                // At what level ?
                int level = 1
                if not params.isEmpty()
                    level = params.removeAt(0).toInt()
                
                // Get player hero
                unit hero = udg_Characters[who.getId() + 1]
                
                if level > 0
                    if level <= spell.maxLevel
                        // Add ability at level
                        hero.addAbility(spell.abilityId)
                        hero.setAbilityLevel(spell.abilityId, level)
                        DisplayTimedTextToPlayer(who, 0, 0, 5, "Apprentissage du sort {0} au niveau {1}".format(
                            GetAbilityName(spell.abilityId), I2S(level)))
                    else
                        DisplayTimedTextToPlayer(who, 0, 0, 5, "Niveau invalide pour ce sort {0}. Attendu : 1-{1}".format(
                            GetAbilityName(spell.abilityId), I2S(spell.maxLevel)))
                else
                    // Remove ability
                    hero.removeAbility(spell.abilityId)
                    DisplayTimedTextToPlayer(who, 0, 0, 5, "Sort oublie : " + GetAbilityName(spell.abilityId))
                
            else
                DisplayTimedTextToPlayer(who, 0, 0, 5, "Sort inconnu " + strIndex)
        else

// Initialization
init
    // Create a trigger to listen to text messages from all players
    trigger chatListener = CreateTrigger()
    ACTIVE_PLAYERS.forEach(p -> chatListener.registerPlayerChatEvent(p, COMMANDS_CHAR, false))
    chatListener.addAction() ->
        string text = GetEventPlayerChatString()
        player typer = GetTriggerPlayer()
        
        Log.trace("Message received from " + typer.getName() + " : " + text)
        
        // Is the message a command ?
        if text.isNotBlank() and text.startsWith(COMMANDS_CHAR)
            // Parse the substrings
            LinkedList<string> params = text.split(" ")
            if not params.isEmpty()
                // Is this an available command ?
                string keyword = params.removeAt(0).substring(COMMANDS_CHAR.length()).toLowerCase()
                Command cmd = Command.MAP.get(keyword)
                if cmd != null
                    if not cmd.cheat or Command.isAllowedCheating(typer)
                        Log.trace("Call command : " + cmd.keyword + " with " + I2S(params.size()) + " parameters")
                        cmd.onCall(typer, params)
                    else
                        // Command refused (cheat) : notify players for fun
                        DisplayTimedTextToPlayer(typer, 0, 0, 5, "Vous n'avez pas le droit d'utiliser la commande " + cmd.keyword + " (triche) !")
                        for int i = 0 to 19
                            DisplayTimedTextToPlayer(Player(i), 0, 0, 5, "{0} a essay√© de tricher avec la commande {1} !".format(typer.getName(), cmd.keyword))
                else
                    DisplayTimedTextToPlayer(typer, 0, 0, 5, "Commande inconnue <" + keyword + ">. Essayez '-help'.")
            else
                Log.error("Failure splitting text into parameters : <" + text + ">")
                