package DilatableTime

// Standard imports
import ClosureForGroups
import ClosureTimers
import Fx
import GameTimer
import LinkedList
import RegisterEvents

// Custom imports

@configurable public constant real TIME_DILATATION_UPDATE_FREQUENCY = 0.5 //ANIMATION_PERIOD

/** Data of a time dilatation : slows/accelerates projectiles/units etc. */
public class TimeDilatation
    /** The REAL time at which the dilatation began */
    real beginRealTime

    /** The REAL time at which the dilatation will stop */
    real endRealTime

    /** Center of the dilatation */
    constant vec3 center

    /** 3D radius of the dilatation (0 = GLOBAL) */
    constant real radius
    constant real radiusSq

    /** The dilatation rate : 0.5 = 50% slower | 2.0 = 200% faster */
    constant real rate

    constant Fx fx

    /** Directory of all active time dilatations */
    static constant LinkedList<TimeDilatation> LIST = new LinkedList<TimeDilatation>

    construct(vec3 center, real radius, real rate)
        this.center = center
        this.radius = radius
        this.radiusSq = this.radius * this.radius
        this.rate = rate

        //this.fx = new Fx(this.center, "Abilities\\Spells\\Orc\\Voodoo\\VoodooAura.mdl")
        this.fx = new Fx(this.center, "war3mapImported\\111.mdx")
            ..setScale(this.radius / 940.0)
            ..setColor(colorA(0, 0, 255, 128))
        /*this.fx.setScale(5.0)
        this.fx.getDummy().setAnimation("birth")
        this.fx.getDummy().setTimeScale(0.0)
        this.fx.getDummy().set*/

    ondestroy
        destroy this.fx

    /** Returns true if this area includes the specified location */
    function contains(vec3 point) returns boolean
        return this.radius == 0 or this.center.toVec2().distanceToSq(point.toVec2()) <= this.radius * this.radius

    /** Start handling the effects of this AoE */
    function start(real realTimeDuration)
        this.beginRealTime = getElapsedGameTime()
        this.endRealTime = this.beginRealTime + realTimeDuration
        LIST.add(this)

    /** Handles time dilatation propagation (none) */
    function propagate() returns boolean
        // Is it currently effective ?
        real time = getElapsedGameTime()
        if time >= this.endRealTime
            // Finished
            return true
        
        // FIXME Change units animation speed
        forUnitsInRange(this.center.toVec2(), this.radius) u ->
            u.setTimeScale(this.rate)
            u.setMoveSpeed(u.getDefaultMovespeed() * this.rate)

        return false

    /** Returns the globally modified time */
    static function getModifiedTime() returns real
        let realTime = getElapsedGameTime()
        real timeOffsetRealToModified = 0
    
        for TimeDilatation tm in TimeDilatation.LIST
            if tm.radius == 0
                let realTimePast = realTime - tm.beginRealTime
                timeOffsetRealToModified += realTimePast * tm.rate
        
        // The globally modified current time
        let modifiedTime = realTime + timeOffsetRealToModified
        return modifiedTime
    
    /** Returns the modified time at the provided location */
    static function getModifiedTime(vec3 where) returns real
        let realTime = getElapsedGameTime()
        real timeOffsetRealToModified = 0
    
        for TimeDilatation tm in TimeDilatation.LIST
            if tm.contains(where)
                let realTimePast = realTime - tm.beginRealTime
                timeOffsetRealToModified += realTimePast * tm.rate
        
        // The current time at this location
        let modifiedTime = realTime + timeOffsetRealToModified
        Log.trace("Real | modified times : " + realTime.toString(1) + " | " + modifiedTime.toString(1))
        return modifiedTime

init
    Log.trace("Init Time Dilatation")
    
    // Periodically check current AoE
    doPeriodically(TIME_DILATATION_UPDATE_FREQUENCY) cb -> 
        let iter = TimeDilatation.LIST.iterator()
        while iter.hasNext()
            TimeDilatation td = iter.next()
            if td.propagate()
                // Finished !
                //Log.trace("AoE finished : " + AbilityId2String(aoe.spell.abilityId))
                destroy td
                iter.remove()
