package CreatureStats

// Standard imports
import HashMap

// Custom imports
import public DamageClass
import Memory

// TODO Remove ?
public tuple statsModifiers(CreatureStats added, CreatureStats addedPercent)

/** Stores data for all available stats of a creature.
Can be used for units, buffs, modifiers, etc. */
public class CreatureStats
    static int REF_COUNTER = 0

    construct()
        REF_COUNTER++

    ondestroy
        REF_COUNTER--
    
    static function getMemoryUsage() returns memoryUsage
        return memoryUsage("CreatureStats", 0, REF_COUNTER)

    // General
    private real moveSpeed = 0.0
    private real life = 0.0
    private real mana = 0.0
    private real lifeRegen = 0.0
    private real manaRegen = 0.0

    // Attacking
    private constant HashMap<DamageClass, real> damageMaps = new HashMap<DamageClass, real>()
    private real attackSpeed = 0.0
    private real range = 0.0
    private real accuracy = 0.0

    // Defending
    private constant HashMap<DamageClass, real> resistanceMaps = new HashMap<DamageClass, real>()
    private real evasion = 0.0

    // Graphics
    private real size = 0.0

    // Accessors/Modifiers
    function getMoveSpeed() returns real
        return this.moveSpeed

    function setMoveSpeed(real moveSpeed)
        this.moveSpeed = moveSpeed
    
    function getLife() returns real
        return this.life

    function setLife(real life)
        this.life = life
    
    function getMana() returns real
        return this.mana

    function setMana(real mana)
        this.mana = mana

    function getLifeRegen() returns real
        return this.lifeRegen

    function setLifeRegen(real lifeRegen)
        this.lifeRegen = lifeRegen

    function getManaRegen() returns real
        return this.manaRegen

    function setManaRegen(real manaRegen)
        this.manaRegen = manaRegen

    // Attacking
    function getDamage(DamageClass damageClass) returns real
        if not this.damageMaps.has(damageClass)
            return 0.0
        
        return this.damageMaps.get(damageClass)

    function setDamage(DamageFamily damageFamily, real damage)
        for DamageClass damageClass in damageFamily.children
            this.damageMaps.put(damageClass, damage)

    function setDamage(DamageClass damageClass, real damage)
        this.damageMaps.put(damageClass, damage)

    function getAttackSpeed() returns real
        return this.attackSpeed

    function setAttackSpeed(real attackSpeed)
        this.attackSpeed = attackSpeed
    
    function getRange() returns real
        return this.getRange()

    function setRange(real range)
        this.range = range

    function getAccuracy() returns real
        return this.accuracy

    function setAccuracy(real accuracy)
        this.accuracy = accuracy

    // Defending
    function getResistance(DamageClass damageClass) returns real
        if not this.resistanceMaps.has(damageClass)
            return 0.0
        
        return this.resistanceMaps.get(damageClass)

    function setResistance(DamageClass damageClass, real resistance)
        this.resistanceMaps.put(damageClass, resistance)

    function setResistance(DamageFamily damageFamily, real resistance)
        for DamageClass damageClass in damageFamily.children
            this.resistanceMaps.put(damageClass, resistance)

    function getEvasion() returns real
        return this.evasion

    function setEvasion(real evasion)
        this.evasion = evasion

    // Graphics
    function getSize() returns real
        return this.size

    function setSize(real size)
        this.size = size

    // Operators
    /** Decrements the stats of this buff by the stats of the provided buff */
    function modifySubtract(CreatureStats subWhat)
        modifyAdd(subWhat, -1)

    /** Increments the stats of this buff with the stats of the provided buff */
    function modifyAdd(CreatureStats addWhat)
        modifyAdd(addWhat, 1)

    private function modifyAdd(CreatureStats addStats, real multiplier)
        if addStats == null
            return

        this.moveSpeed    += (addStats.moveSpeed   * multiplier)
        this.life         += (addStats.life        * multiplier)
        this.mana         += (addStats.mana        * multiplier)
        this.lifeRegen    += (addStats.lifeRegen   * multiplier)
        this.manaRegen    += (addStats.manaRegen   * multiplier)
        this.attackSpeed  += (addStats.attackSpeed * multiplier)
        this.range        += (addStats.range       * multiplier)
        this.accuracy     += (addStats.accuracy    * multiplier)
        this.evasion      += (addStats.evasion     * multiplier)
        this.size         += (addStats.size        * multiplier)

        for DamageClass damageClass in DamageClass.LIST
            // Damage maps
            if addStats.damageMaps.has(damageClass)
                real amount = multiplier * addStats.damageMaps.get(damageClass)
                mapAdd(this.damageMaps, damageClass, amount)

            // Resistance maps
            if addStats.resistanceMaps.has(damageClass)
                real amount = multiplier * addStats.resistanceMaps.get(damageClass)
                mapAdd(this.resistanceMaps, damageClass, amount)

    private static function mapAdd(HashMap<DamageClass, real> map, DamageClass damageClass, real amount)
        real newValue = amount
        if map.has(damageClass)
            newValue += map.get(damageClass)
        map.put(damageClass, newValue)

    /** Apply the bonus percentage <statsPercent> <factor> times to these stats.
    The values are 0-based. 0.1 <=> +10%. | 1.0 <=> +100% <=> x2 */
    function modifyAddPercent(CreatureStats statsAddPercent, real factor)
        if statsAddPercent == null
            return

        this.moveSpeed    *= (1.0 + statsAddPercent.moveSpeed  ) * factor
        this.life         *= (1.0 + statsAddPercent.life       ) * factor
        this.mana         *= (1.0 + statsAddPercent.mana       ) * factor
        this.lifeRegen    *= (1.0 + statsAddPercent.lifeRegen  ) * factor
        this.manaRegen    *= (1.0 + statsAddPercent.manaRegen  ) * factor
        this.attackSpeed  *= (1.0 + statsAddPercent.attackSpeed) * factor
        this.range        *= (1.0 + statsAddPercent.range      ) * factor
        this.accuracy     *= (1.0 + statsAddPercent.accuracy   ) * factor
        this.evasion      *= (1.0 + statsAddPercent.evasion    ) * factor
        this.size         *= (1.0 + statsAddPercent.size       ) * factor

        for DamageClass damageClass in DamageClass.LIST
            // Damage maps
            if statsAddPercent.damageMaps.has(damageClass)
                real amount = factor * (1 + statsAddPercent.damageMaps.get(damageClass))
                mapAdd(this.damageMaps, damageClass, amount)

            // Resistance maps
            if statsAddPercent.resistanceMaps.has(damageClass)
                real amount = factor * (1 + statsAddPercent.resistanceMaps.get(damageClass))
                mapAdd(this.resistanceMaps, damageClass, amount)

    /** Returns a detailed text with all data stored in this object */
    function toDetailedString(boolean showEmpty, boolean percent) returns string
        string humanReadableOutput = ""

        string suffix = ""
        real factor = 1.0
        if percent
            suffix = "%"
            factor = 100.0

        if showEmpty or 0.0 != this.moveSpeed
            humanReadableOutput += " | Vitesse de déplacement : {0}{1}".format((this.moveSpeed * factor).toString(), suffix)
        if showEmpty or 0.0 != this.life       
            humanReadableOutput += " | Vie : {0}{1}".format((this.life * factor).toString(), suffix)
        if showEmpty or 0.0 != this.mana       
            humanReadableOutput += " | Mana : {0}{1}".format((this.mana * factor).toString(), suffix)
        if showEmpty or 0.0 != this.lifeRegen  
            humanReadableOutput += " | Régénération vie : {0}{1}".format((this.lifeRegen * factor).toString(), suffix)
        if showEmpty or 0.0 != this.manaRegen  
            humanReadableOutput += " | Régénération mana : {0}{1}".format((this.manaRegen * factor).toString(), suffix)
        if showEmpty or 0.0 != this.attackSpeed
            humanReadableOutput += " | Vitesse d'attaque : {0}{1}".format((this.attackSpeed * factor).toString(), suffix)
        if showEmpty or 0.0 != this.range      
            humanReadableOutput += " | Portee : {0}{1}".format((this.range * factor).toString(), suffix)
        if showEmpty or 0.0 != this.accuracy   
            humanReadableOutput += " | Precision : {0}{1}".format((this.accuracy * factor).toString(), suffix)
        if showEmpty or 0.0 != this.evasion    
            humanReadableOutput += " | Esquive : {0}{1}".format((this.evasion * factor).toString(), suffix)
        if showEmpty or 0.0 != this.size       
            humanReadableOutput += " | Taille : {0}{1}".format((this.size * factor).toString(), suffix)

        for DamageClass damageClass in DamageClass.LIST
            real damage = 0.0
            if this.damageMaps.has(damageClass)
                damage = this.damageMaps.get(damageClass)
            if showEmpty or damage != 0.0
                humanReadableOutput += " | Dommages {1} : {0}{1}".format((damage * factor).toString(), damageClass.getColoredName(), suffix)
            
            real resistance = 0.0
            if this.resistanceMaps.has(damageClass)
                resistance = this.resistanceMaps.get(damageClass)
            if showEmpty or resistance != 0.0
                humanReadableOutput += " | Résistance {1} : {0}{1}".format((resistance * factor).toString(), damageClass.getColoredName(), suffix)
        
        return humanReadableOutput

@Test function testAddBuffs()
    CreatureStats a = new CreatureStats()
    a.setSize(1)
    a.setLife(2)
    a.setDamage(DamageClass.DAMAGE_CONTONDANT, 6)
    a.setDamage(DamageClass.DAMAGE_FEU, 3)
    
    CreatureStats b = new CreatureStats()
    b.setSize(-1)
    b.setLife(2)
    b.setDamage(DamageClass.DAMAGE_FEU, 1)
    b.setDamage(DamageClass.DAMAGE_PSYCHIQUE, -6)

    // Test addition
    CreatureStats sum = new CreatureStats() // A + B
    sum..modifyAdd(a)..modifyAdd(b)
    
    sum.getSize().assertEquals(0)
    sum.getLife().assertEquals(4)
    sum.getDamage(DamageClass.DAMAGE_CONTONDANT).assertEquals(6)
    sum.getDamage(DamageClass.DAMAGE_FEU).assertEquals(4)
    sum.getDamage(DamageClass.DAMAGE_PSYCHIQUE).assertEquals(-6)
    
    // Test substraction
    CreatureStats difference = new CreatureStats() // A - B
    difference..modifyAdd(a)..modifySubtract(b)
    
    difference.getSize().assertEquals(2)
    difference.getLife().assertEquals(0)
    difference.getDamage(DamageClass.DAMAGE_CONTONDANT).assertEquals(6)
    difference.getDamage(DamageClass.DAMAGE_FEU).assertEquals(2)
    difference.getDamage(DamageClass.DAMAGE_PSYCHIQUE).assertEquals(6)

    // Test zero
    CreatureStats zero = new CreatureStats()
    zero..modifyAdd(zero)
    
    zero.getSize().assertEquals(0)
    zero.getLife().assertEquals(0)
    zero.getDamage(DamageClass.DAMAGE_CONTONDANT).assertEquals(0)
    zero.getDamage(DamageClass.DAMAGE_FEU).assertEquals(0)
    zero.getDamage(DamageClass.DAMAGE_PSYCHIQUE).assertEquals(0)
