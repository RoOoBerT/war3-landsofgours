package ConeEffect

// Standard imports
import ClosureForGroups
import ClosureTimers
import GameTimer
import LinkedList

// Custom imports
import DilatableTime
import Memory
import SpecialEffects

@configurable public constant real CONE_EFFECTS_UPDATE_PERIOD = ANIMATION_PERIOD

/** Interface used to dispatch events related to units interacting with cone effects */
public interface ConeUnitHandler
    function onUnitAffected(ConeEffect cone, unit who)

/** Stores graphical metadata associated to a conic wave (part of a cone effect) */
public class ConicWaveGraphics
    /** Special effect (optional) */
    constant SpecialEffectType effectType

    /** Time interval for head special effects */
    constant real effectPeriod

    /** Radius of head special effect */
    constant real effectRadius

    /** Time of last head special effect */
    real effectLastTime = 0

    construct(SpecialEffectType effectType, real effectInterval, real effectRadius)
        this.effectType = effectType
        this.effectPeriod = effectInterval
        this.effectRadius = max(1.0, effectRadius)

/** Data related to a spell with a line/cone/circle shape */
public class ConeEffect
    private static int REF_COUNTER = 0

    // Generic properties
    /** The time at which the effect started */
    private real beginTime

    /** The time at which the effect will stop */
    private real endTime

    private constant real duration

    /** The initial unit that casted the spell */
    private constant unit emitter

    /** Orientation of the cone */
    private angle ang = 0.0.asAngleRadians()

    /** Origin of the cone */
    private vec3 origin

    // Propagation properties
    /** An optional unit that the effect should follow, or null */
    private unit followUnit = null

    /** Speed of propagation : Head = <x> + <y> * currentTime */
    private vec2 headPropagationSpeed = vec2(0, 0)

    /** Speed of propagation : Queue = <x> + <y> * currentTime */
    private vec2 queuePropagationSpeed = vec2(0, 0)

    /** Angle of spread of the effect */
    private angle spreadAngle = 0.0.asAngleRadians()

    /** Maximum range of the effect, or 0 if none */
    private real maxRange = 0

    /** To put to true to stop the effect */
    private boolean stop = false

    // Graphics
    private ConicWaveGraphics queue = null
    private ConicWaveGraphics along = null
    private ConicWaveGraphics head = null

    // Handlers
    private ConeUnitHandler unitEnteringHandler
    private ConeUnitHandler unitLeavingHandler
    private real unitsChecksFrequency = 0
    private real unitsLastCheckTime = this.beginTime
    private group unitsInCone = CreateGroup()
    
    // Cone effects directory
    /** Directory of all active cone effects */
    static constant LinkedList<ConeEffect> LIST = new LinkedList<ConeEffect>

    construct(real duration, vec3 origin, unit emitter, unit followUnit)
        REF_COUNTER++
        this.duration = duration
        this.origin = origin
        this.emitter = emitter
        this.followUnit = followUnit

    function start()
        this.beginTime = TimeDilatation.getModifiedTime(this.origin)
        this.endTime = beginTime + this.duration

        // Register this cone effect
        LIST.add(this)
    
    ondestroy
        DestroyGroup(this.unitsInCone)
        REF_COUNTER--
        
    static function getMemoryUsage() returns memoryUsage
        return memoryUsage("Special effects", LIST.size(), REF_COUNTER)

    // Modifiers
    function setAngle(angle ang)
        this.ang = ang

    function setOrigin(vec3 origin)
        this.origin = origin

    function setFollowUnit(unit followUnit)
        this.followUnit = followUnit
        
    function setHeadPropagationSpeed(vec2 headPropagationSpeed)
        this.headPropagationSpeed = headPropagationSpeed

    function setQueuePropagationSpeed(vec2 queuePropagationSpeed)
        this.queuePropagationSpeed = queuePropagationSpeed
    
    function setSpreadAngle(angle spreadAngle)
        this.spreadAngle = spreadAngle

    function setMaxRange(real maxRange)
        this.maxRange = maxRange
    
    function setQueue(ConicWaveGraphics queue)
        this.queue = queue

    function setAlong(ConicWaveGraphics along)
        this.along = along
    
    function setHead(ConicWaveGraphics head)
        this.head = head

    function setUnitEnteringHandler(ConeUnitHandler unitEnteringHandler)
        this.unitEnteringHandler = unitEnteringHandler

    function setUnitLeavingHandler(ConeUnitHandler unitLeavingHandler)
        this.unitLeavingHandler = unitLeavingHandler

    function handleGraphics(ConicWaveGraphics gfx, real queuePosition, real headPosition)
        let currentTime = getElapsedGameTime()
        if currentTime - gfx.effectLastTime >= gfx.effectPeriod
            gfx.effectLastTime = currentTime

            // All along the way
            real currentPosition = queuePosition
            while currentPosition <= headPosition
                //Log.trace("Cone propagating : " + currentPosition.toString(0) + " / " + headPosition.toString(0))

                // All the angle
                //let circonference = currentPosition * PI2 * this.spreadAngle.degrees() / 360.0
                let circonference = currentPosition * this.spreadAngle.radians()
                let iterationsCount = max(1, (circonference / gfx.effectRadius).round())
                let angleStep = this.spreadAngle / iterationsCount.toReal()
                
                angle currentAngle = this.ang - (this.spreadAngle / 2)
                for int i = 0 to iterationsCount
                    let currentPoint = this.origin.toVec2().polarOffset(currentAngle, currentPosition)

                    // Show effect
                    gfx.effectType.flashWithoutLeak(currentPoint)

                    // Increase angle
                    currentAngle = currentAngle.op_plus(angleStep)

                // Increase distance
                currentPosition += gfx.effectRadius

    /** Compute the position (offset) of the cone at the provided date, considering the provided speed */
    function computePosition(real time, vec2 speed) returns real
        let timeElapsed = max(0, time - this.beginTime)
        real position = speed.x + timeElapsed * speed.y
        if this.maxRange > 0
            position = min(this.maxRange, position)
        return position

    /** Computes whether a unit is in the area of the specified cone shape */
    static function isPointInCone(vec2 origin, angle ang, angle spreadAngle, real queuePosition, real headPosition, vec2 point) returns boolean
        // Check distance
        real dist2 = origin.distanceToSq(point)
        if dist2 > (queuePosition * queuePosition) and dist2 <= (headPosition * headPosition)
            //Log.trace("Location in cone range : " + point.toString())
            // Distance ok -> check angle
            if spreadAngle.degrees() >= 360.0
                return true // >= 360Â°
            
            // FIXME : Seems not to work !
            angle a = origin.angleTo(point).op_minus(ang)
            if ModuloReal(a.degrees(), 360.0) <= spreadAngle.degrees() // No mod because spreadAngle can be 360
                return true
        return false

    /** Terminates the effect */
    function stop()
        this.stop = true

    /** Handles cone effect propagation. Returns true if the cone disappered and should be deleted */
    function propagate() returns boolean
        // Is it still effective ?
        if this.stop
            return true
        let currentTime = TimeDilatation.getModifiedTime(this.origin)
        if currentTime >= this.endTime
            // Notify units leaving the area
            if this.unitLeavingHandler != null
                for unit u from this.unitsInCone
                    this.unitLeavingHandler.onUnitAffected(this, u)

            return true // Caller destroy this object
        
        // Has it started ?
        if currentTime < this.beginTime
            return false // Not started yet
        
        // Follow a unit ?
        if this.followUnit != null
            this.origin = this.followUnit.getPos3Real()
            
            // Adopt the unit's rotation ?
            if this.spreadAngle.degrees() < 360.0
                this.ang = this.followUnit.getFacingAngle()
        
        // Compute cone progression
        //let timeElapsed = currentTime - this.beginTime
        let headPosition = this.computePosition(currentTime, this.headPropagationSpeed)
        let queuePosition = min(headPosition,  this.computePosition(currentTime, this.queuePropagationSpeed))
        
        //Log.trace("Cone propagating : " + this.emitter.getName() + " from " + queuePosition.toString(0) + " to " + headPosition.toString(0))

        // Along graphics : All along the way
        if this.queue != null
            this.handleGraphics(this.queue, queuePosition, queuePosition)

        // Queue graphics : behind (close to center)
        if this.along != null
            this.handleGraphics(this.along, queuePosition, headPosition)

        // Head graphics : ahead
        if this.head != null
            this.handleGraphics(this.head, headPosition, headPosition)
        
        // Shall we refresh entering/leaving units ?
        if this.unitEnteringHandler != null or this.unitLeavingHandler != null
            if currentTime - this.unitsLastCheckTime >= this.unitsChecksFrequency

                // TODO Check whether the cone is moving/rotating/etc
                // Check the previous position of cone
                let minimumPosition = min (
                    this.computePosition(this.unitsLastCheckTime, this.headPropagationSpeed),
                    queuePosition
                )

                let newUnitsInCone = CreateGroup()

                // Find units that entered the area
                vec2 center = this.origin.toVec2()
                forUnitsInRange(center, headPosition) u ->
                    //Log.trace("Unit is maybe cone range : " + u.getName())
                    if ConeEffect.isPointInCone(center, this.ang, this.spreadAngle, minimumPosition, headPosition, u.getPos())
                        newUnitsInCone.addUnit(u)

                        // Did this unit just enter the area ?
                        if this.unitEnteringHandler != null and not this.unitsInCone.contains(u)
                            this.unitEnteringHandler.onUnitAffected(this, u)
                
                // Find units that just left the area
                if this.unitLeavingHandler != null
                    for unit u from this.unitsInCone
                        if not newUnitsInCone.contains(u)
                            this.unitLeavingHandler.onUnitAffected(this, u)
                
                DestroyGroup(this.unitsInCone)
                this.unitsInCone = newUnitsInCone
                
                // Update last check time
                this.unitsLastCheckTime = currentTime
        
        // Not finished
        return false

init
    // Periodically propagate current cone effects
    doPeriodically(CONE_EFFECTS_UPDATE_PERIOD) cb -> 
        let iter = ConeEffect.LIST.iterator()
        while iter.hasNext()
            ConeEffect cone = iter.next()
            if cone.propagate()
                // Finished !
                //Log.trace("Cone finished : " + cone.emitter.getName())
                destroy cone
                iter.remove()

