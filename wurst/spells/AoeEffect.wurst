package AoeEffect

// Standard imports
import ClosureTimers
import ClosureForGroups
import LinkedList

// Custom imports
import DilatableTime

@configurable public constant real AOE_EFFECTS_UPDATE_PERIOD = 0.1 //ANIMATION_PERIOD

/** AoE Impact Handler */
public interface AoeImpactHandler
    function onImpact(AoeEffect aoe, vec2 where)

public class GenericImpactHandler implements AoeImpactHandler
    constant string effectPath
    constant real scale
    constant color col
    constant real delay
    constant real radius
    constant real damage
    constant attacktype attackType = ATTACK_TYPE_CHAOS

    construct(string effectPath, real scale, color col, real delay, real radius, real damage)
        this.effectPath = effectPath
        this.scale = scale
        this.col = col
        this.delay = delay
        this.radius = radius
        this.damage = damage

    ondestroy

    function onImpact(AoeEffect aoe, vec2 where)
        // Create impact effect
        addEffect(this.effectPath, where)
            ..setScale(this.scale)
            ..setColor(this.col.red, this.col.green, this.col.blue)
            ..destr()

        // Impact after some delay
        doAfter(this.delay) ->
            // Impact happened
            if this.damage != 0.
                forUnitsInRange(where, aoe.getRadius()) u ->
                    aoe.getEmitter().damageTarget(u, this.damage, this.attackType)

/** Data related to a spell with an Area of Effect (AoE) */
public class AoeEffect
    // AoE properties
    /** The time at which the effect will stop */
    private constant real endTime

    /** The initial unit that casted the spell */
    private constant unit emitter

    /** Center of the AoE */
    private constant vec3 center

    /** Radius of the AoE */
    private constant real radius

    // Impact(s) properties
    /** Frequency at which effects appear inside the AoE */
    private constant real frequency

    /** Impact handler */
    private constant AoeImpactHandler impactHandler

    /** Time at which the last effect occured */
    private real lastEffectTime

    // Dynamic data
    /** To put to true to stop the effect */
    private boolean stop = false

    /** Directory of all active AoEs */
    static constant LinkedList<AoeEffect> LIST = new LinkedList<AoeEffect>

    construct(real endTime, unit emitter, vec3 center, real radius, real frequency, AoeImpactHandler impactHandler)
        this.endTime = endTime
        this.emitter = emitter
        this.center = center
        this.radius = radius
        this.frequency = max(frequency, 0.01)
        this.impactHandler = impactHandler

    // Accessors
    function getEndTime() returns real
        return this.endTime

    /** The initial unit that casted the spell */
    function getEmitter() returns unit
        return this.emitter

    /** Center of the AoE */
    function getCenter() returns vec3
        return this.center

    /** Radius of the AoE */
    function getRadius() returns real
        return this.radius

    /** Terminates the effect */
    function stop()
        this.stop = true

    // Functions
    /** Start handling the effects of this AoE */
    function start()
        this.lastEffectTime = TimeDilatation.getModifiedTime(this.center)
        LIST.add(this)

    /** Handles AoE effect propagation. Returns true if it is finished and should be deleted */
    function propagate() returns boolean
        // Is it still effective ?
        if this.stop
            return true
        real time = TimeDilatation.getModifiedTime(this.center)
        if time >= this.endTime
            // Finished
            return true

        //Log.trace("AoE running : " + AbilityId2String(aoe.spell.abilityId))
        // Shall we create new effects ?
        while time - this.lastEffectTime > this.frequency
            this.lastEffectTime += this.frequency

            // Create a new effect now
            angle ang = GetRandomDirectionDeg().asAngleDegrees()
            real dist = GetRandomReal(0, this.radius)
            vec2 target = this.center.toVec2().polarOffset(ang, dist)

            // Call the impact effect
            this.impactHandler.onImpact(this, target)
        
        return false

init
    Log.trace("Init AoE spells")
    
    // Periodically check current AoE
    doPeriodically(AOE_EFFECTS_UPDATE_PERIOD) cb -> 
        let iter = AoeEffect.LIST.iterator()
        while iter.hasNext()
            AoeEffect aoe = iter.next()
            if aoe.propagate()
                // Finished !
                //Log.trace("AoE finished : " + AbilityId2String(aoe.spell.abilityId))
                destroy aoe
                iter.remove()
