package WizardSpell

// Standard imports

// Custom imports
import Dummys
import Imports
import LinkedList
import public Spells

/** Describes a school of magic */
public class SpellSchool
    // Properties
    private constant string name
    private constant color col
    private constant string iconPath

    static constant LinkedList<SpellSchool> LIST = new LinkedList<SpellSchool>

    // Functions
    private construct(string name, color col, string iconPath)
        this.name = name
        this.col = col
        this.iconPath = iconPath
        //Log.debug("Ecole de magie : " + this.getColoredName())
        LIST.add(this)

    function getColoredName() returns string
        return this.col.toColorString() + this.name + "|r"
    
    function getName() returns string
        return this.name

    function getColor() returns color
        return this.col
    
    function getIconPath() returns string
        return this.iconPath
    
    // Values
    static constant ABJURATION = new SpellSchool("Abjuration", color(0, 0, 255), Icons.bTNLightningShield)
    static constant ENTROPIE = new SpellSchool("Entropie", color(255, 255, 0), Icons.bTNScatterRockets)
    static constant EVOCATION = new SpellSchool("Evocation", color(255, 0, 0), Icons.bTNPurge)
    static constant INVOCATION = new SpellSchool("Invocation", color(0, 255, 0), Icons.bTNSpiritLink)
    static constant NECROMANCIE = new SpellSchool("NÃ©cromancie", color (32, 32, 32), Icons.bTNOrbOfCorruption)
    static constant TRANSMUTATION = new SpellSchool("Transmutation", color(255, 128, 0), Icons.bTNPolymorph)
    
/** Describes a wizard spell, associated to a specific school and learnable with a scroll */
public class WizardSpell extends Spell
    private constant SpellSchool school

    private construct(int abilityId, int maxLevel, TargetType target, string order, SpellSchool school)
        super(abilityId, maxLevel, target, order)
        this.school = school
    
    function getSchool() returns SpellSchool
        return this.school

    function getColoredName() returns string
        return "{1}{0}|r".format(this.getName(), this.school.getColor().toColorString())

    // ======== WIZARD SPELL BOOK DIRECTORY ========
    constant static WizardSpell ARME_ENFLAMMEE                      = new WizardSpell('A009', 20, TargetType.UNIT    , "", SpellSchool.ABJURATION)
    constant static WizardSpell BAIES_NOURRICIERES                  = new WizardSpell('A00S', 20, TargetType.NONE    , "", SpellSchool.TRANSMUTATION)
    constant static WizardSpell BOUCLIER_GLACE                      = new WizardSpell('A016', 20, TargetType.UNIT    , "frostarmor", SpellSchool.ABJURATION)
    constant static WizardSpell CONE_FROID                          = new WizardSpell('A00W', 20, TargetType.LOCATION, "carrionswarm", SpellSchool.EVOCATION)
    constant static WizardSpell DILATATION_TEMPORELLE               = new WizardSpell('A01F', 20, TargetType.LOCATION, "", SpellSchool.TRANSMUTATION)
    constant static WizardSpell FEU_SOLAIRE                         = new WizardSpell('A00Y', 20, TargetType.NONE    , "corporealform", SpellSchool.EVOCATION)
    constant static WizardSpell FLETRISSURE_ABOMINABLE_ABI_DALZIM   = new WizardSpell('A00D', 20, TargetType.LOCATION, "", SpellSchool.NECROMANCIE)
    constant static WizardSpell HATE                                = new WizardSpell('A00O', 20, TargetType.NONE    , "bearform", SpellSchool.ABJURATION)
    constant static WizardSpell INCINERATEUR_AGANAZZAR              = new WizardSpell('A00T', 20, TargetType.LOCATION, "", SpellSchool.EVOCATION)
    constant static WizardSpell NUAGE_INCENDIAIRE                   = new WizardSpell('A00A', 20, TargetType.LOCATION, "", SpellSchool.INVOCATION)
    constant static WizardSpell NUAGE_MORTEL                        = new WizardSpell('A008', 20, TargetType.LOCATION, "", SpellSchool.INVOCATION)
    constant static WizardSpell NUAGE_PUANT                         = new WizardSpell('A005', 20, TargetType.LOCATION, "", SpellSchool.INVOCATION)
    constant static WizardSpell NUEE_METEORES                       = new WizardSpell('A00P', 20, TargetType.LOCATION, "devourmagic", SpellSchool.EVOCATION)
    constant static WizardSpell PEAU_ECORCE                         = new WizardSpell('A007', 20, TargetType.UNIT    , "charm", SpellSchool.TRANSMUTATION)
    constant static WizardSpell PEAU_PIERRE                         = new WizardSpell('A006', 20, TargetType.UNIT    , "chainlightning", SpellSchool.TRANSMUTATION)
    constant static WizardSpell PROJECTILE_MAGIQUE                  = new WizardSpell('A00N', 20, TargetType.UNIT    , "creepthunderbolt", SpellSchool.EVOCATION)
    constant static WizardSpell RENVOI_SORTS                        = new WizardSpell('A00I', 20, TargetType.UNIT    , "", SpellSchool.ABJURATION)
    constant static WizardSpell TOILES_ARAIGNEE                     = new WizardSpell('A014', 20, TargetType.LOCATION, "cloudoffog", SpellSchool.INVOCATION)
    constant static WizardSpell TRANSMUTATION_CHAIR_PIERRE          = new WizardSpell('A00E', 20, TargetType.UNIT    , "", SpellSchool.TRANSMUTATION)

// Functions
init
    // Check dummy spells order strings
    vec2 targetLoc = ZERO2
    for Spell spell in Spell.LIST
        //if spell instanceof DummySpell
        if spell.order.isNotBlank()
            //DummySpell dummySpell = spell castTo DummySpell
            switch spell.target
                case PASSIVE // Nothing to do
                case NONE
                    if not spell.cast(players[PLAYER_NEUTRAL_PASSIVE], targetLoc, 1)
                        Log.error("Spell order string might be wrong : " + GetAbilityName(spell.abilityId) + " => " + spell.order + " ?")
                case LOCATION
                    if not spell.castPoint(players[PLAYER_NEUTRAL_PASSIVE], targetLoc, targetLoc, 1)
                        Log.error("Spell order string might be wrong : " + GetAbilityName(spell.abilityId) + " => " + spell.order + " ?")
                default
                    unit targetUnit = CreateUnit(players[PLAYER_NEUTRAL_PASSIVE], DUMMY_TYPE_ID_VISIBLE, targetLoc.x, targetLoc.y, 0.0)
                    if not spell.castUnit(players[PLAYER_NEUTRAL_PASSIVE], targetLoc, targetUnit, 1)
                        Log.error("Spell order string might be wrong : " + GetAbilityName(spell.abilityId) + " => " + spell.order + " ?")
                    targetUnit.setTimedLife(10.0)
