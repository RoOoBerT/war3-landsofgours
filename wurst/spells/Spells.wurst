package Spells

// Standard imports
import HashMap
import LinkedList

// Custom imports
import Dummys

// Constants
/** Available types of targets */
public enum TargetType
    LOCATION
    LOCATION_OR_UNIT
    NONE
    PASSIVE
    UNIT

/** Describes a spell and associated metadata */
public class Spell
    constant int abilityId
    constant int maxLevel
    constant TargetType target
    constant string order

    private construct(int abilityId, int maxLevel, TargetType target, string order)
        this.abilityId = abilityId
        this.maxLevel = maxLevel
        this.target = target
        //this.orderId = OrderId(order)
        this.order = order

        LIST.add(this)

        if MAP.has(this.abilityId)
            Log.error("Duplicated spell detected : " + this.abilityId.toString())
        MAP.put(this.abilityId, this)

        // Just check that some spell order strings are not duplicated
        if order.isNotBlank()
            if ORDERS_MAP.has(order)
                Log.error("Duplicated spell order detect : " + order + " => " + ORDERS_MAP.get(order).getName() + "+" + this.getName())
            ORDERS_MAP.put(order, this)
    
    static constant LinkedList<Spell> LIST = new LinkedList<Spell>
    static constant HashMap<int, Spell> MAP = new HashMap<int, Spell>
    
    private static constant HashMap<string, Spell> ORDERS_MAP = new HashMap<string, Spell>()

    // Functions
    function getName() returns string
        return GetAbilityName(this.abilityId)
    
    function getIconPath() returns string
        return BlzGetAbilityIcon(this.abilityId)

    // Spells
    static constant Spell INVENTORY_1_6_SLOTS = new Spell('A00J', 6, TargetType.PASSIVE, "")
    
    constant static DummySpell TOILE_ARAIGNEE = new DummySpell('A015', 20, TargetType.LOCATION, "dreadlordinferno")

    //FIXME Param1 should be unit (caster), not owner ?!
    /** Create a dummy unit and order it to launch this spell */
    function cast(player owner, vec2 fromPoint, int level) returns boolean
        unit dummyUnitCaster = CreateUnit(owner, DUMMY_TYPE_ID, fromPoint.x, fromPoint.y, 0)
            ..addAbility(abilityId)
            ..setAbilityLevel(abilityId, level)
            ..setTimedLife(1.0)
        boolean spellCastResult = dummyUnitCaster.issueImmediateOrder(order)
        if not spellCastResult
            Log.error("Failure launching dummy spell : " + GetAbilityName(abilityId))
        return spellCastResult

    /** Create a dummy unit and order it to launch this spell at a point */
    function castPoint(player owner, vec2 fromPoint, vec2 toPoint, int level) returns boolean
        unit dummyUnitCaster = CreateUnit(owner, DUMMY_TYPE_ID, fromPoint.x, fromPoint.y, 0)
            ..addAbility(abilityId)
            ..setAbilityLevel(abilityId, level)
            ..setTimedLife(1.0)
        boolean spellCastResult = dummyUnitCaster.issuePointOrder(order, toPoint)
        if not spellCastResult
            Log.error("Failure launching dummy spell : " + GetAbilityName(abilityId))
        return spellCastResult
    
    /** Create a dummy unit and order it to launch this spell on a unit */
    function castUnit(player owner, vec2 fromPoint, unit target, int level) returns boolean
        unit dummyUnitCaster = CreateUnit(owner, DUMMY_TYPE_ID, fromPoint.x, fromPoint.y, 0)
            ..addAbility(abilityId)
            ..setAbilityLevel(abilityId, level)
            ..setTimedLife(1.0)
        boolean spellCastResult = dummyUnitCaster.issueTargetOrder(order, target)
        if not spellCastResult
            Log.error("Failure launching dummy spell : " + GetAbilityName(abilityId))
        return spellCastResult

public class DummySpell extends Spell
    construct(int abilityId, int maxLevel, TargetType target, string order)
        super(abilityId, maxLevel, target, order)
    
    // Methods

    // Dummy spells
