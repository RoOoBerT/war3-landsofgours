package Spells

// Standard imports
import HashMap
import LinkedList

// Custom imports

// Constants
/** Unit-type ID of generic invisible Dummy */
public constant int DUMMY_TYPE_ID = 'h001'

/** Unit-type ID of visible Dummy (for debugging) */
constant int DUMMY_TYPE_ID_VISIBLE = 'h009'

/** Available types of targets */
public enum TargetType
    LOCATION
    LOCATION_OR_UNIT
    NONE
    PASSIVE
    UNIT

/** Describes a spell and associated metadata */
public class Spell
    constant int abilityId
    constant int maxLevel
    constant TargetType target
    constant string order

    construct(int abilityId, int maxLevel, TargetType target, string order)
        this.abilityId = abilityId
        this.maxLevel = maxLevel
        this.target = target
        //this.orderId = OrderId(order)
        this.order = order

        LIST.add(this)

        if MAP.has(this.abilityId)
            Log.error("Duplicated spell detected : " + this.abilityId.toString())
        MAP.put(this.abilityId, this)
    
    static constant LinkedList<Spell> LIST = new LinkedList<Spell>
    static constant HashMap<int, Spell> MAP = new HashMap<int, Spell>
    
    // Spells
    static constant Spell INVENTORY_1_6_SLOTS = new Spell('A00J', 6, TargetType.PASSIVE, "")
    
    constant static DummySpell TOILE_ARAIGNEE = new DummySpell('A015', 20, TargetType.LOCATION, "dreadlordinferno")

    /** Create a dummy unit and order it to launch this spell */
    function cast(player owner, vec2 fromPoint, int level) returns boolean
        unit dummyUnitCaster = CreateUnit(owner, DUMMY_TYPE_ID, fromPoint.x, fromPoint.y, 0)
            ..addAbility(abilityId)
            ..setAbilityLevel(abilityId, level)
            ..setTimedLife(1.0)
        boolean spellCastResult = dummyUnitCaster.issueImmediateOrder(order)
        if not spellCastResult
            Log.error("Failure launching dummy spell : " + GetAbilityName(abilityId))
        return spellCastResult

    /** Create a dummy unit and order it to launch this spell at a point */
    function castPoint(player owner, vec2 fromPoint, vec2 toPoint, int level) returns boolean
        unit dummyUnitCaster = CreateUnit(owner, DUMMY_TYPE_ID, fromPoint.x, fromPoint.y, 0)
            ..addAbility(abilityId)
            ..setAbilityLevel(abilityId, level)
            ..setTimedLife(1.0)
        boolean spellCastResult = dummyUnitCaster.issuePointOrder(order, toPoint)
        if not spellCastResult
            Log.error("Failure launching dummy spell : " + GetAbilityName(abilityId))
        return spellCastResult
    
    /** Create a dummy unit and order it to launch this spell on a unit */
    function castUnit(player owner, vec2 fromPoint, unit target, int level) returns boolean
        unit dummyUnitCaster = CreateUnit(owner, DUMMY_TYPE_ID, fromPoint.x, fromPoint.y, 0)
            ..addAbility(abilityId)
            ..setAbilityLevel(abilityId, level)
            ..setTimedLife(1.0)
        boolean spellCastResult = dummyUnitCaster.issueTargetOrder(order, target)
        if not spellCastResult
            Log.error("Failure launching dummy spell : " + GetAbilityName(abilityId))
        return spellCastResult

public class DummySpell extends Spell
    construct(int abilityId, int maxLevel, TargetType target, string order)
        super(abilityId, maxLevel, target, order)
    
    // Methods

    // Dummy spells
    

// Functions
init
    Log.trace("Init spells")

    // Check dummy spells order strings
    vec2 targetLoc = vec2(0, 0)
    for Spell spell in Spell.LIST
        if spell instanceof DummySpell
            //DummySpell dummySpell = spell castTo DummySpell
            switch spell.target
                case PASSIVE // Nothing to do
                case NONE
                    if not spell.cast(players[PLAYER_NEUTRAL_PASSIVE], targetLoc, 1)
                        Log.error("Spell order string might be wrong : " + GetAbilityName(spell.abilityId) + " => " + spell.order + " ?")
                case LOCATION
                    if not spell.castPoint(players[PLAYER_NEUTRAL_PASSIVE], targetLoc, targetLoc, 1)
                        Log.error("Spell order string might be wrong : " + GetAbilityName(spell.abilityId) + " => " + spell.order + " ?")
                default
                    unit targetUnit = CreateUnit(players[PLAYER_NEUTRAL_PASSIVE], DUMMY_TYPE_ID, targetLoc.x, targetLoc.y, 0.0)
                    if not spell.castUnit(players[PLAYER_NEUTRAL_PASSIVE], targetLoc, targetUnit, 1)
                        Log.error("Spell order string might be wrong : " + GetAbilityName(spell.abilityId) + " => " + spell.order + " ?")
