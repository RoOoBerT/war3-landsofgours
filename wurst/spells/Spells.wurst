package Spells

// Standard imports
import EventHelper
import HashMap
import LinkedList
import RegisterEvents

// Custom imports

// SPELL CONSTANTS
constant int ABILITY_RAIN_OF_ARROWS = 'A00V'

/** Unit-type ID of generic invisible Dummy */
constant int DUMMY_TYPE_ID = 'h001'

/** Unit-type ID of visible Dummy (for debugging) */
constant int DUMMY_TYPE_ID_VISIBLE = 'h009'

/** Available types of targets */
public enum TargetType
    LOCATION
    LOCATION_OR_UNIT
    NONE
    //PASSIVE
    UNIT

/** Describes a school of magic */
public class SpellSchool
    // Properties
    constant string name
    constant color col

    // Functions
    private construct(string name, color col)
        this.name = name
        this.col = col
        Log.debug("Ecole de magie : " + this.getColoredName())

    function getColoredName() returns string
        return this.col.toColorString() + this.name + "|r"
    
    function getName() returns string
        return this.name
    
    // Values
    static constant ABJURATION = new SpellSchool("Abjuration", color(0, 0, 255))
    static constant ENTROPIE = new SpellSchool("Entropie", color(255, 128, 0))
    static constant EVOCATION = new SpellSchool("Evocation", color(255, 0, 0))
    static constant INVOCATION = new SpellSchool("Invocation", color(255, 255, 0))
    static constant NECROMANCIE = new SpellSchool("NÃ©cromancie", color (32, 32, 32))
    static constant TRANSMUTATION = new SpellSchool("Transmutation", color(0, 255, 0))

/** Describes a spell and associated metadata */
public class Spell
    constant int abilityId
    constant int maxLevel
    constant TargetType target
    constant string order

    construct(int abilityId, int maxLevel, TargetType target, string order)
        this.abilityId = abilityId
        this.maxLevel = maxLevel
        this.target = target
        //this.orderId = OrderId(order)
        this.order = order

        LIST.add(this)
        MAP.put(this.abilityId, this)
    
    static constant LinkedList<Spell> LIST = new LinkedList<Spell>
    static constant HashMap<int, Spell> MAP = new HashMap<int, Spell>

/** Describes a wizard spell, associated to a specific school and learnable with a scroll */
public class WizardSpell extends Spell
    constant SpellSchool school
    constant int scrollId

    construct(int abilityId, int maxLevel, TargetType target, string order, SpellSchool school, int scrollId)
        super(abilityId, maxLevel, target, order)
        this.school = school
        this.scrollId = scrollId
    
    // ======== SPELL BOOK DIRECTORY ========
    constant static WizardSpell PROJECTILE_MAGIQUE = new WizardSpell('A004', 20, TargetType.UNIT, "creepthunderbolt", SpellSchool.EVOCATION, 'I009')
    
    // AoE
    constant static WizardSpell TOILES_ARAIGNEE = new WizardSpell('A014', 20, TargetType.LOCATION, "cloudoffog", SpellSchool.INVOCATION, 'I00T')
    constant static WizardSpell NUEE_METEORES = new WizardSpell('A00P', 20, TargetType.LOCATION, "devourmagic", SpellSchool.EVOCATION, 'I00K')
    
    // Conic spells
    constant static WizardSpell INCINERATEUR_AGANAZZAR = new WizardSpell('A00T', 20, TargetType.NONE, "", SpellSchool.EVOCATION, '0')
    constant static WizardSpell CONE_FROID = new WizardSpell('A00X', 20, TargetType.NONE, "", SpellSchool.EVOCATION, '0')
    constant static WizardSpell FEU_SOLAIRE = new WizardSpell('A00Y', 20, TargetType.NONE, "", SpellSchool.EVOCATION, '0')
    constant static WizardSpell BOUCLIER_GLACE = new WizardSpell('A016', 20, TargetType.UNIT, "frostarmor", SpellSchool.EVOCATION, 'I00K')

public class DummySpell extends Spell
    constant int dummyType
    
    construct(int abilityId, int maxLevel, TargetType target, string order)
        super(abilityId, maxLevel, target, order)
        this.dummyType = DUMMY_TYPE_ID
    
    // Methods
    /** Create a dummy unit and order it to launch a spell at a point */
    function castPoint(player owner, vec2 fromPoint, vec2 toPoint, int level) returns boolean
        unit dummyUnit = CreateUnit(owner, this.dummyType, fromPoint.x, fromPoint.y, 0)
            ..addAbility(abilityId)
            ..setAbilityLevel(abilityId, level)
            ..setTimedLife(1.0)
        boolean spellCastResult = dummyUnit.issuePointOrder(order, toPoint)
        if not spellCastResult
            Log.error("Failure launching dummy spell : " + GetAbilityName(abilityId))
        return spellCastResult

    // Dummy spells
    constant static DummySpell FLECHES_PRIMITIVES = new DummySpell('A00Z', 20, TargetType.LOCATION, "clusterrockets")
    constant static DummySpell FLECHES_DE_BRONZE = new DummySpell('A010', 20, TargetType.LOCATION, "clusterrockets")
    constant static DummySpell FLECHES_DE_GIVRE = new DummySpell('A011', 20, TargetType.LOCATION, "clusterrockets")
    
    constant static DummySpell TOILE_ARAIGNEE = new DummySpell('A015', 20, TargetType.LOCATION, "dreadlordinferno")

// Functions
init
    Log.trace("Init spells")

    // Rain of arrows
    registerSpellEffectEvent(ABILITY_RAIN_OF_ARROWS) ->
        Log.debug("Spell was cast : " + GetSpellAbility().getHandleId().toString())
        
        int abilityLevel = 1
        vec2 fromPoint = GetTriggerUnit().getPos()
        vec2 targetPoint = getSpellTargetPos()
        DummySpell.FLECHES_DE_BRONZE.castPoint(GetOwningPlayer(GetTriggerUnit()), fromPoint, targetPoint, abilityLevel)
