package PlayerData

// Standard imports
import ClosureTimers
import HashMap
import LinkedList
import RegisterEvents

// Custom imports
import Initialization
import CharacterClass
import CreatureType
import public MessageType
import public PlayerConstants

/** Stores important metadata about one player */
public class PlayerData
    /** The corresponding player */
    private constant player play

    /** The initial player's name */
    private constant string name

    /** The player's main character */
    private unit character

    /** TODO The player's main character's familiar */
    private unit familiar

    /** Is the player ready to go to the adventure ? */
    private boolean ready

    construct(player play)
        this.play = play
        this.name = play.getName()

    // Accessors
    function getPlayer() returns player
        return this.play
    
    function getName() returns string
        return this.name

    function getIndex() returns int
        return this.play.getId()
    
    function getCharacter() returns unit
        return this.character

    function isReady() returns boolean
        return this.ready
    
    // Setters
    function setCharacter(unit character)
        this.character = character

    function setReady(boolean ready)
        this.ready = ready

    /** Mapping of ALL players */
    protected static constant HashMap<int, PlayerData> MAP = new HashMap<int, PlayerData>
    protected static constant HashMap<unit, PlayerData> CHARACTERS_MAPS = new HashMap<unit, PlayerData>

    static function get(int index) returns PlayerData
        return MAP.get(index)
    
    static function get(player p) returns PlayerData
        return MAP.get(p.getId())
    
    static function get(unit character) returns PlayerData
        return CHARACTERS_MAPS.get(character)

// Functions
/** Display a message of a certain type to a specific player */
public function displayMessage(MessageType msgType, player toPlayer, real duration, string message)
    string prefix = ""
    if msgType != null
        prefix = "[{1}{0}|r] ".format(msgType.name.toUpperCase(), msgType.col.toColorString())
    let finalMessage = "{0}{1}".format(prefix, message)

    // If player is null, send a message to everybody
    if toPlayer == null
        for player p in ACTIVE_PLAYERS
            DisplayTimedTextToPlayer(p, 0, 0, duration, finalMessage)
    else
        DisplayTimedTextToPlayer(toPlayer, 0, 0, duration, finalMessage)

/*public function player.setAlliance(player other, alliancetype whichAllianceSetting, boolean value)
    SetPlayerAlliance(this, other, whichAllianceSetting, value)*/

/** Called when a player leaves the game */
function onPlayerLeave(player leaver)
    ACTIVE_PLAYERS.remove(leaver)

    // TODO : Update difficulty

    // Notify all PlayerData
    displayMessage(MessageType.PLAYER, null, 10.0, leaver.getNameColored() + " a quitté la partie !")

/** Called when a player picks a character */
function onCharacterSelected(unit _seller, unit character)
    // Remove soul
    GetBuyingUnit().remove()

    // Register the selected character for this player
    player owner = character.getOwner()
    let pd = PlayerData.get(owner)
    pd.setCharacter(character)
    PlayerData.CHARACTERS_MAPS.put(character, pd)
    BlzSetHeroProperName(character, pd.getName())

    // Move the picked character
    vec2 direction = character.getPos().polarOffset(0.0.asAngleDegrees(), 512.0)
    character.issuePointOrder("move", direction)

    // Select the character
    owner.selectSingle(character)

    // Check which character class it is
    CreatureType creatureType = CreatureType.get(character.getTypeId())
    CharacterClass characterClass = creatureType.getClass()
    displayMessage(MessageType.SUCCESS, owner, 10, "Félicitations ! " + owner.getName() + " est maintenant : " + characterClass.getColoredName())
    owner.setName("|r[{1}] {0}".format(owner.getNameColored(), characterClass.getColoredName()))

    // Specifics : ARCHER
    if characterClass == CharacterClass.ARCHER
        character.setAbilityLevel('A00J', 2) // 2 slots in inventory
        character.addItemById('I00O') // Give bow
        character.addItemById('I00N') // Give arrows
            ..setCharges(25) // 25 arrows

// Initialization
init
    // Detect current players
    for int i = 0 to PLAYERS_HUMAN_MAX - 1
        player p = players[i]

        // Player data
        PlayerData.MAP.put(i, new PlayerData(p))
    
        // Configure experience options
        SetPlayerHandicapXP(p, 0.0)

    // Is there only one player ?
    if ACTIVE_PLAYERS.size() == 1
        Log.setLevel(Loglevel.TRACE)
        Log.info("Single player detected. Log level : " + DEBUG_LEVEL.getTag())
    else
        Log.setLevel(Loglevel.ERROR)
    
    // Greetings text
    Log.debug("Number of active PlayerData : " + I2S(ACTIVE_PLAYERS.size()))

    displayMessage(MessageType.SUCCESS, null, 15, "Bienvenue dans Lands of Gours !")
    displayMessage(MessageType.HINT, null, 15, "Choisissez une classe de personnage.")

    // Units
    let classSelector = findFirstUnitMatching(new GenericUnitFilter('n00E'))

    // Initialization
    ACTIVE_PLAYERS.forEach() p ->
        // Set player properties
        p.setPlayerAlliance(PLAYER_COLONS, ALLIANCE_HELP_RESPONSE, true)
        p.setPlayerAlliance(PLAYER_COLONS, ALLIANCE_HELP_RESPONSE, true)
        p.setPlayerAlliance(PLAYER_COLONS, ALLIANCE_SHARED_VISION, true)
        p.setPlayerAlliance(PLAYER_COLONS, ALLIANCE_PASSIVE, true)

        p.setPlayerAlliance(PLAYER_GOURS_NEUTRAL, ALLIANCE_HELP_REQUEST, false)
        p.setPlayerAlliance(PLAYER_GOURS_NEUTRAL, ALLIANCE_HELP_RESPONSE, false)
        p.setPlayerAlliance(PLAYER_GOURS_NEUTRAL, ALLIANCE_SHARED_VISION, false)
        p.setPlayerAlliance(PLAYER_GOURS_NEUTRAL, ALLIANCE_PASSIVE, true)

        p.setPlayerAlliance(PLAYER_GOURS_HOSTILE, ALLIANCE_HELP_REQUEST, false)
        p.setPlayerAlliance(PLAYER_GOURS_HOSTILE, ALLIANCE_HELP_RESPONSE, false)
        p.setPlayerAlliance(PLAYER_GOURS_HOSTILE, ALLIANCE_SHARED_VISION, false)
        p.setPlayerAlliance(PLAYER_GOURS_HOSTILE, ALLIANCE_PASSIVE, false)

        // Create a soul to select class
        createUnit(p, 'h002', p.getStartLocation(), 180.0.asAngleDegrees())

    // Start game : After a small delay
    doAfter(1) ->
        gg_snd_GLOBAL_START_GAME.play()
        
        ACTIVE_PLAYERS.forEach() p ->
            // Select boat
            p.selectSingle(classSelector)
            p.panCamToTimed(classSelector, 0.5)

    // Register : Handle player leaving
    registerPlayerEvent(EVENT_PLAYER_LEAVE) ->
        player leaver = GetTriggerPlayer()
        onPlayerLeave(leaver)
    
    // Register : Class selection
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL) ->
        unit seller = GetTriggerUnit()
        if seller.getTypeId() == 'n00E'
            unit character = GetSoldUnit()
            onCharacterSelected(seller, character)
            

