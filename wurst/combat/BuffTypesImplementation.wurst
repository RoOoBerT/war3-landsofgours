package BuffTypesImplementation

// Standard imports
import Assets
import BuffObjEditing
import AbilityObjEditing
import ObjectIds
import ObjectIdGenerator

// Custom imports
import BuffType
import WizardSpell

/** Creates an ability based on Tornado aura that allows to display a buff on units without side effects */
public function createDummyBuffAbility(int buffId) returns buffTuple
    let abilId = ABIL_ID_GEN.next()

    if compiletime
        new AbilityDefinitionAuraSlow(abilId)
            ..setName("Aura Dummy: " + buffId.toString())
            ..setMovementSpeedFactor(1, 0)
            ..setBuffs(1, int2fourchar(buffId))
            //..presetIcon("")
            ..setArtTarget("")
            ..setTargetsAllowed(1, "self")
            //..setArtTarget("")
            //..setTargetAttachmentPoint("")
            ..setEditorSuffix("wurst")
    return buffTuple(abilId, buffId)

// Test buff for debugging
constant BUFF_TEST = compiletime(createDummyBuffObject("TEST", "C'est un buff dynamique de test !", Textures.doodad_Cinematic, Abilities.invisibilityTarget, "origin"))
public constant BuffType BUFF_TYPE_TEST = new BuffType(BUFF_TEST, 0, "TEST")

constant BUFF_PEAU_ECORCE = compiletime(createDummyBuffAbility('B006'))
public constant BuffType BUFF_TYPE_PEAU_ECORCE = new BuffType(0, "Peau d'Ã©corce")

constant BUFF_PEAU_PIERRE = compiletime(createDummyBuffAbility('B005'))
public constant BuffType BUFF_TYPE_PEAU_PIERRE = new BuffType(BUFF_PEAU_PIERRE, WizardSpell.PEAU_PIERRE.abilityId, "Peau de pierre", Abilities.aIdaTarget, "overhead")
        ..setResistance(DamageFamily.FAMILY_PHYSIQUE, 5.0)
