package Combat

// Standard imports
import ClosureForGroups
import DamageDetection
import DamageType
import RegisterEvents

// Custom imports
import CharacterClass
import CreatureRace
import CreatureStats
import CreatureType
import Imports
import ItemTypeArrows
import ItemTypeBow
import Musics
import PlayerData
import Projectiles
import UnitsBuffs

/** Dummy invisible ability used to detect units with ranged attack */
constant int ABILITY_RANGED = 'A00Z'

/** Text tag aligment to display unit damage received*/
constant vec3 DAMAGE_TEXTTAG_OFFSET = vec3(-64, 64, 0)

/** Cause a unit to inflict real damage of a certain class */
function inflictRealDamageUnfiltered(unit damageSource, unit target, real amount, DamageClass damageClass)
    inflictRealDamageUnfiltered(damageSource, target, amount, damageClass, vec3(0, 0, 0))
function inflictRealDamageUnfiltered(unit damageSource, unit target, real amount, DamageClass damageClass, vec3 ttagOffset)
    if amount != 0
        dealCodeDamage(damageSource, target, amount)

        // Show damage effect
        /*string effectPath = damageClass.getEffectPath()
        if effectPath != null
            flashEffect(effectPath, target.getPos())*/
        let fx = damageClass.getEffectType()
        if fx != null
            fx.flashWithoutLeak(target, "origin")

        // Show damage text
        int variation = -1 * amount.round()
        if variation != 0
            string tTagText = variation.toString()
            if variation > 0
                tTagText = "+" + tTagText

            createTTEx(target.getPos3Zero() + DAMAGE_TEXTTAG_OFFSET + ttagOffset, vec2(0, TextTagSpeed2Velocity(64)), tTagText, 9.0, 1.5, damageClass.getColor())

/** Find the first usable bow of the unit (if any) */
function findBow(unit whichUnit) returns itemTuple
    ItemFilter bowFilter = (ItemType itemType, item itm) -> itemType instanceof ItemTypeBow
    return ItemType.findFirstItem(whichUnit, bowFilter)

/** Find the first usable arrows of the unit (if any) */
function findArrows(unit whichUnit, ItemTypeBow bowType, item _bow) returns itemTuple
    // Does this bow automatically supply arrows ?
    if bowType.getSelfSupplyArrows() != null
        return itemTuple(null, bowType.getSelfSupplyArrows())

    ItemFilter arrowsFilter = (ItemType itemType, item itm) -> itemType instanceof ItemTypeArrows
    return ItemType.findFirstItem(whichUnit, arrowsFilter)

/** Creates an attack from attacker to target unit using the specified arrows properties */
public function generateArrowFromUnit(unit attacker, unit target, ItemTypeArrows arrows)
    // Generate arrow effect
    let sourcePoint = attacker.getPos3Real() + vec3(0, 0, 64)
    let targetPoint = target.getPos3Real() + vec3(0, 0, 64)

    // Impact handler
    ImpactHandler arrowImpactHandler = (vec3 impactPoint) ->
        // Impact effect
        string impactEffectPath = arrows.getImpactEffectPath()
        if impactEffectPath != null
            flashEffect(impactEffectPath, impactPoint)

        // Is there a custom impact handler to use ?
        let customImpactHandler = arrows.getCustomImpactHandler()
        if customImpactHandler == null
            // Do the standard impact handling for arrows
            CreatureStats statsAdded = AllUnitsBuffs.getStatsAdded(attacker)

            // Is there a radius of effect ?
            real impactRadius = arrows.getImpactRadius()
            if impactRadius > 0
                forUnitsInRange(impactPoint.toVec2(), impactRadius) u ->
                    onUnitPhysicalAttack(attacker, statsAdded, target)
        else
            // Call the custom impact handler
            customImpactHandler.onImpact(impactPoint)

    if not arrows.isFollowUnit()
        new StandardProjectile(attacker, arrows.getEffectPath(), sourcePoint)
            ..setDestination(targetPoint)
            ..setSpeed(600)
            ..setArc(arrows.getArc())
            ..setImpactHandler(arrowImpactHandler)
            ..launch()
    else
        new FollowingProjectile(attacker, arrows.getEffectPath(), sourcePoint, target)
            ..setImpactHandler(arrowImpactHandler)
            ..setSpeed(600)
            ..launch()

/** Called when a unit attacks another unit with a bow */
public function onUnitAttackWithBow(unit attacker, unit target)
    //Log.trace("Unit is attacked by an archer : " + archer.getName())
    player owner = GetOwningPlayer(attacker)

    // Cancel this event's damage because real damage will be dealt later by the projectile(s)
    //BlzSetEventDamage(0)

    // Check if the attacker has a bow
    itemTuple bow = findBow(attacker)
    if bow.itemType != null
        // Check if the attacker has ammo
        itemTuple arrowsObj = findArrows(attacker, bow.itemType castTo ItemTypeBow, bow.itm)
        if arrowsObj.itemType != null
            // Does the arrow physically exist ?
            if arrowsObj.itm != null
                int charges = arrowsObj.itm.getCharges() - 1
                if charges > 0
                    // Consume one arrow
                    arrowsObj.itm.setCharges(charges)
                else
                    // Empty arrows stack
                    arrowsObj.itm.remove()
            
            // Create one attack
            //Log.trace("Archer " + archer.getName() + " uses " + bow.itm.getName() + " with " + arrowsObj.itm.getName())
            generateArrowFromUnit(attacker, target, arrowsObj.itemType castTo ItemTypeArrows)
            
            // Cancel attack
            //attacker.interruptAttack()
        else
            attacker.issueImmediateOrder("stop")
            if owner == localPlayer
                displayMessage(MessageType.ERROR, owner, 3.0, "Vous avec besoin de flèches pour utiliser " + bow.itm.getName() + " !")
                PlaySound(Sounds.error)
    else
        attacker.issueImmediateOrder("stop")
        if owner == localPlayer
            displayMessage(MessageType.ERROR, owner, 3, "Vous devez équiper un arc pour attaquer !")
            PlaySound(Sounds.error)

/** When a unit emits a "game" instant attack (delayed).
The specified modifiers of the attacker should be used. */
public function onUnitInstantPhysicalAttack(unit attacker, unit target)
    // Get creature properties
    CreatureType creatureType = CreatureType.get(attacker.getTypeId())
    if creatureType == null
        Log.warn("Properties not found for : " + attacker.getName() + ", aborting attack")
        return
    CreatureRace creatureRace = creatureType.getRace()
    
    // Compute the total cumulated stats of the attacker
    CreatureStats attackerStats = new CreatureStats()
    if creatureRace != null
        attackerStats.modifyAdd(creatureRace.getStatsAdded()) // Race bonuses
    attackerStats.modifyAdd(creatureType.getStatsAdded()) // Creature type bonuses
    attackerStats.modifyAdd(AllUnitsBuffs.getStatsAdded(attacker)) // Buffs/state bonuses

    // Compute cumulated bonus percentage
    CreatureStats attackerStatsPercent = new CreatureStats()
    if creatureRace != null
        attackerStatsPercent.modifyAdd(creatureRace.getStatsAddedPercent()) // Race bonuses %
    attackerStatsPercent.modifyAdd(creatureType.getStatsAddedPercent()) // Creature type bonuses %
    attackerStatsPercent.modifyAdd(AllUnitsBuffs.getStatsAddedPercent(attacker)) // Buffs/state bonuses %

    // Apply percentage bonuses
    attackerStats.modifyAddPercent(attackerStatsPercent, 1.0)

    onUnitPhysicalAttack(attacker, attackerStats, target)

/** When a unit emits a "game" instant attack (melee).
The instant modifiers (buffs) of the attacker should be used. */
public function onUnitPhysicalAttack(unit attacker, CreatureStats statsAdded, unit target)
    // Check the stats of the attacker and the defender
    CreatureStats targetStatsAdded = AllUnitsBuffs.getStatsAdded(attacker)

    vec3 ttagOffset = vec3(0, 0, 0)
    for DamageClass damageClass in DamageClass.LIST
        real damageOfType = statsAdded.getDamage(damageClass)
        if damageOfType != 0
            real resistanceOfType = targetStatsAdded.getResistance(damageClass)
            damageOfType *= (1 - resistanceOfType)

        if damageOfType != 0
            inflictRealDamageUnfiltered(attacker, target, damageOfType, damageClass, ttagOffset)
            ttagOffset += vec3(0, 40.0, 0)

/** Called when a unit physically attacks another unit (in Warcraft's sense).
This is equivalent to a "game attack" for melee units. For ranged units it 
is just the moment when a projectile is thrown. */
function onUnitRealWarcraftAttackEvent(unit attacker, unit target)
    BlzSetEventDamage(0)

    // Check what kind of attack this is
    if attacker.getAbilityLevel(CharacterClass.ARCHER.abil) > 0
        // This is a ranged attack with defined ammo and weapon
        onUnitAttackWithBow(attacker, target)
    else
        // This is a standard attack : melee or ranged (but no "custom" projectile and ammo management)
        onUnitInstantPhysicalAttack(attacker, target)

/** Called when a player's main character has died */
function onPlayerCharacterDies(PlayerData pd, unit characterDead)
    displayMessage(MessageType.PLAYER, null, 15.0, "R.I.P. {0} !".format(pd.getName()))

    // Play death music for local player
    if pd.getPlayer() == localPlayer
        // Play sad music
        Music.MUSIC_DEAD.loopMusic(true)

        // Apply screen filter
        CinematicFadeBJ(bj_CINEFADETYPE_FADEOUT, 5.0, Textures.black_mask, 0, 0, 0, 128)

        // Prevent cadavre from disappearing
        characterDead.pause()

init
    // Register an event when a unit is physically attacked
    boolexpr action = Condition() ->
        if getDamageType() == DamageType.ATTACK
            unit attacker = GetEventDamageSource()
            unit target = GetTriggerUnit()
            onUnitRealWarcraftAttackEvent(attacker, target)

    addOnDamageFunc(action)

    // Register player's main character's death
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        unit characterDead = GetTriggerUnit()
        PlayerData pd = PlayerData.get(characterDead)
        if pd != null
            onPlayerCharacterDies(pd, characterDead)
