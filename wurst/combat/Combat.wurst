package Combat

// Standard imports
import Assets
import DamageDetection
import DamageType
import RegisterEvents

// Custom imports
import Bows
import CharacterClass
import UnitsBuffs
import PlayerData
import Musics

/** Dummy invisible ability used to detect units with ranged attack */
constant int ABILITY_RANGED = 'A00Z'

/** Text tag aligment to display unit damage received*/
constant vec3 DAMAGE_TEXTTAG_OFFSET = vec3(-64, 64, 0)

/** Inflicts real damage from a source unit to a target */
function inflictRealDamage(unit damageSource, unit target, real amount, DamageClass damageClass)
    if amount != 0
        dealCodeDamage(damageSource, target, amount)

        // Show damage text
        int variation = -1 * amount.round()
        if variation != 0
            string tTagText = variation.toString()
            if variation > 0
                tTagText = "+" + tTagText

            createTTEx(target.getPos3Zero() + DAMAGE_TEXTTAG_OFFSET, vec2(0, TextTagSpeed2Velocity(64)), tTagText, 9.0, 1.5, damageClass.getColor().withAlpha(0))

function computePhysicalAttackDamage(unit _attacker, unit _target) returns real
    return 0

/** Called when a unit physically attacks another unit */
function onUnitPhysicalAttack(unit attacker, unit target)
    // Check what kind of attack this is
    if attacker.getAbilityLevel(CharacterClass.ARCHER.abil) > 0
        // This is a ranged attack with defined ammo and weapon
        onUnitAttackWithBow(attacker, target)
    else
        // This is a standard attack : melee or ranged (but no "custom" projectile and ammo management)
        //let damage = GetEventDamage()
        BlzSetEventDamage(0)

        // Check the modifiers of the attacker
        BuffType attackerModifiers = AllUnitsBuffs.getTotalBuffs(attacker)
        BuffType targetModifiers = AllUnitsBuffs.getTotalBuffs(target)

        for DamageClass damageClass in DamageClass.LIST
            real damageOfType = attackerModifiers.getDamage(damageClass)
            if damageOfType != 0
                real resistanceOfType = targetModifiers.getResistance(damageClass)
                damageOfType *= (1 - resistanceOfType)

            if damageOfType != 0
                inflictRealDamage(attacker, target, damageOfType, damageClass)

/** Called when a player's main character has died */
function onPlayerCharacterDies(PlayerData pd, unit characterDead)
    displayMessage(MessageType.PLAYER, null, 15.0, "R.I.P. {0} !".format(pd.getName()))

    // Play death music for local player
    if pd.getPlayer() == localPlayer
        // Play sad music
        Music.MUSIC_DEAD.loopMusic(true)

        // Apply screen filter
        CinematicFadeBJ(bj_CINEFADETYPE_FADEOUT, 5.0, Textures.black_mask, 0, 0, 0, 128)

        // Prevent cadavre from disappearing
        characterDead.pause()

init
    // Register an event when a unit is physically attacked
    boolexpr action = Condition() ->
        if getDamageType() == DamageType.ATTACK
            unit attacker = GetEventDamageSource()
            unit target = GetTriggerUnit()
            onUnitPhysicalAttack(attacker, target)

    addOnDamageFunc(action)

    // Register player's main character's death
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        unit characterDead = GetTriggerUnit()
        PlayerData pd = PlayerData.get(characterDead)
        if pd != null
            onPlayerCharacterDies(pd, characterDead)
