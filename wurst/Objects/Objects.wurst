package Objects

// Standard imports
import HashMap
import LinkedList

// Custom imports
import Spells

/** Families of objects (weapon, scroll spell, quest item, etc.) */
public enum ObjectFamily
    ARROWS
    BOW
    FRAGMENT
    NORMAL
    SPELL_SCROLL

/** Types of objects and associated metadata */
public class ObjectType
    // Properties
    int itemType    
    private ObjectFamily family
    
    // Unique items
    private boolean unique
    private item uniqueInstance = null

    // Directory
    static constant LinkedList<ObjectType> LIST = new LinkedList<ObjectType>
    static constant HashMap<int, ObjectType> MAP = new HashMap<int, ObjectType>

    // Functions
    construct (ObjectFamily family, int itemType, boolean unique)
        this.family = family
        this.itemType = itemType
        this.unique = unique

        LIST.add(this)
        MAP.put(itemType, this)
    
    function getFamily() returns ObjectFamily
        return this.family

    function getType() returns int
        return this.itemType

    function isUnique() returns boolean
        return this.unique
    
    function getUniqueInstance() returns item
        return this.uniqueInstance
    
    static constant ObjectType ANNEAU_ELFIQUE_EN_OR = new ObjectType(ObjectFamily.NORMAL, 'I000', true)

/** An instance of an object (item) with metadata */
public class Object
    constant item itm
    constant ObjectType objectType

    construct (item itm, ObjectType objectType)
        this.itm = itm
        this.objectType = objectType

/** Describes metadata of a bow object */
public class ObjectTypeBow extends ObjectType
    // Properties
    /** The bow requires arrows to be used */
    constant boolean requiresArrows

    // Functions
    construct(int itemType, boolean unique, boolean requiresArrows)
        super(ObjectFamily.BOW, itemType, unique)
        this.requiresArrows = requiresArrows
    
    function isRequiresArrows() returns boolean
        return this.requiresArrows
    
    // Bows directory
    static constant ObjectTypeBow ARC_PRIMITIF = new ObjectTypeBow('I00O', false, true)

/** Describes metadata of an arrow object (ammo) */
public class ObjectTypeArrows extends ObjectType
    // Properties
    constant DummySpell spell
    
    // Functions
    construct(int itemType, boolean unique, DummySpell spell)
        super(ObjectFamily.ARROWS, itemType, unique)
        this.spell = spell
    
    static constant ObjectTypeArrows FLECHES_PRIMITIVES = new ObjectTypeArrows('I00N', false, DummySpell.FLECHES_PRIMITIVES)
    static constant ObjectTypeArrows FLECHES_DE_BRONZE = new ObjectTypeArrows('I00R', false, DummySpell.FLECHES_DE_BRONZE)
    static constant ObjectTypeArrows FLECHES_DE_GIVRE = new ObjectTypeArrows('I00S', false, DummySpell.FLECHES_DE_GIVRE)

/** Describes metadata of a fragment of object */
public class ObjectTypeFragment extends ObjectType
    // Properties
    constant ObjectType fragmentOfWhat
    constant int howManyRequired
    
    // Functions
    construct(int itemType, boolean unique, ObjectType fragmentOfWhat)
        super(ObjectFamily.FRAGMENT, itemType, unique)
        this.fragmentOfWhat = fragmentOfWhat
        this.howManyRequired = 1
    
    construct(int itemType, boolean unique, ObjectType fragmentOfWhat, int howManyRequired)
        super(ObjectFamily.FRAGMENT, itemType, unique)
        this.fragmentOfWhat = fragmentOfWhat
        this.howManyRequired = howManyRequired
    
    static constant ObjectTypeFragment ANNEAU_ELFIQUE_1 = new ObjectTypeFragment('I002', false, ObjectType.ANNEAU_ELFIQUE_EN_OR, 2)
    
init
    Log.info("Objects loaded.")

// -------- OBJECT FUNCTIONS --------
/** Return object metadata of an item type */
public function getObject(item whichItem) returns ObjectType
    // Check in cache
    ObjectType obj = ObjectType.MAP.get(whichItem.getTypeId())
    if (obj == null)
        Log.error("ObjectType type not found for : " + GetItemName(whichItem))
    
    return obj

/** Find the first item of a certain family in the inventory of a unit */
public function findFirstObjectOfFamily(unit whichUnit, ObjectFamily family) returns Object
    for itemSlot = 0 to 5
        item itemInSlot = UnitItemInSlot(whichUnit, itemSlot)
        if itemInSlot != null
            ObjectType objectType = getObject(itemInSlot)
            if objectType != null and objectType.getFamily() == family
                return new Object(itemInSlot, objectType)

    return null
