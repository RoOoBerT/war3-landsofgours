package ItemType

// Standard imports
import HashMap
import LinkedList

// Custom imports

/** An instance of item with associated ItemType metadata */
public tuple itemTuple(item itm, ItemType itemType)

public interface ItemFilter
    function test(ItemType itemType, item itm) returns boolean

/** Types of objects and associated metadata */
public class ItemType
    // Properties
    constant int itemType

    private real lootProbability = 0.0
    
    // Unique items
    private boolean unique = false
    private item uniqueInstance = null

    // Directory
    static constant LinkedList<ItemType> LIST = new LinkedList<ItemType>
    static constant HashMap<int, ItemType> MAP = new HashMap<int, ItemType>

    // Functions
    private construct (int itemType)
        this.itemType = itemType

        // Register the item type and ensure no collision
        LIST.add(this)
        let collision = MAP.get(itemType)
        MAP.put(itemType, this)

        // Detect collisions
        if collision != null
            Log.error("Duplicate item type found : {0} !".format(I2S(this.itemType)))

    // Accessors
    function getType() returns int
        return this.itemType

    function isUnique() returns boolean
        return this.unique
    
    function getUniqueInstance() returns item
        return this.uniqueInstance

    function getLootProbability() returns real
        return this.lootProbability
    
    // Modifiers
    function setUnique(boolean unique)
        this.unique = unique

    function setLootProbability(real lootProbability)
        this.lootProbability = lootProbability

    // Functions
    /** Return ItemInstance metadata of an item type */
    static function getObject(item whichItem) returns ItemType
        // Check in cache
        ItemType obj = ItemType.MAP.get(whichItem.getTypeId())
        if obj == null
            Log.error("ItemType type not found for : " + GetItemName(whichItem))
        
        return obj
    
    /** Find the first item matching a criterion in the inventory of a unit */
    static function findFirstItem(unit whichUnit, ItemFilter filter) returns itemTuple
        for itemSlot = 0 to 5
            item itemInSlot = UnitItemInSlot(whichUnit, itemSlot)
            if itemInSlot != null
                ItemType itemType = ItemType.getObject(itemInSlot)
                if itemType != null and (filter == null or filter.test(itemType, itemInSlot))
                    return itemTuple(itemInSlot, itemType)
        
        return itemTuple(null, null)
        
    static constant ItemType ANNEAU_ELFIQUE_EN_OR = new ItemType('I000')
                    ..setUnique(true)
                    ..setLootProbability(0.1)
    static constant ItemType PIECES_OR = new ItemType('I003')
                    

