package Projectiles

// Standard imports
import ClosureTimers
import Fx
import LinkedList

// Custom imports
import DilatableTime
import public ImpactHandler
import Memory

/* 
A projectile is fired from a gun that is mounted on a cliff above the sea. What is the range of the gun? At what angle should the gun be fired to hit a ship within its range?
    z0 = posZ of the gun above the x-y plane.
    v0 = muzzle velocity = initial velocity of the projectile.
    alpha = the angle between the horizontal (the x-y plane) and the muzzle of the gun.
    z(t) = the posZ of the projectile t seconds after being fired.
    r(t) = the distance of the projectile from the gun after t seconds.
    g = pull of gravity.

    Then the parametric equations of motion of (r(t), z(t)) are:
    r(t) = v0 * cos(alpha) * t
    z(t) = -1/2 * g * t^2 + v0 * sin(alpha) * t + z0

Source : http://www.egwald.ca/geometry/projectile3d.php
*/

/** Projectiles impact check frequency */
@configurable public constant real PROJECTILES_UPDATE_PERIOD = 0.5 // ANIMATION_PERIOD

/** A projectile object which can be followed over time and emits a notification upon impact */
public abstract class Projectile
    private static int REF_COUNTER = 0
    protected constant Fx fx
    protected constant unit emitter
    
    // Handlers
    protected ImpactHandler impactHandler = null

    // Projectiles directory
    protected static constant LinkedList<Projectile> LIST = new LinkedList<Projectile>
    
    construct(unit emitter, string effectPath, vec3 origin)
        REF_COUNTER++
        this.fx = new Fx(origin.toVec2(), effectPath)
        this.fx.setXYZ(origin, false)
        this.emitter = emitter
    
    ondestroy
        REF_COUNTER--
        destroy this.fx
        // TODO Maybe remove impact handler
    
    // Modifiers
    function setImpactHandler(ImpactHandler impactHandler)
        this.impactHandler = impactHandler
    
    // Functions
    /** Starts the trajectory and effects of the projectile */
    function launch()
        LIST.add(this)
    
    /** Update the projectile position and returns true if it exploded */
    abstract function move() returns boolean

    static function getMemoryUsage() returns memoryUsage
        return memoryUsage("Projectiles", REF_COUNTER, LIST.size())

/** A projectile with a "standard" (hyperbolic) trajectory */
public class StandardProjectile extends Projectile
    // Physics
    protected constant vec3 origin
    protected vec3 dest
    protected real speed = 200.0
    protected real height = 250

    // Internal physics data
    private real launchTime
    private angle groundAngle
    private real totalDistance
    private real arrivalTime
    
    // Height function (hyperbolic) coefficients
    private real verticalAcceleration
    private real verticalSpeed

    // Temporary
    private real previousDistance
    private real previousHeight

    construct(unit emitter, string effectPath, vec3 origin)
        super(emitter, effectPath, origin)
        this.origin = origin
    
    ondestroy
    
    // Modifiers
    function setDestination(vec3 dest)
        this.dest = dest

    function setSpeed(real speed)
        this.speed = speed

    function setHeight(real height)
        this.height = height

    // Functions
    /** Starts the trajectory and effects of the projectile */
    override function launch()
        this.groundAngle = this.origin.toVec2().angleTo(dest.toVec2())
        this.totalDistance = this.origin.toVec2().distanceTo(dest.toVec2())
        this.arrivalTime = this.totalDistance / this.speed
        this.launchTime = TimeDilatation.getModifiedTime(this.origin)

        this.fx.setXYAngleInstant(this.groundAngle)

        // Compute vertical speed to reach the specified maximum height
        this.verticalSpeed = 2 * this.height / this.arrivalTime
        // Compute acceleration to reach the target point precisely
        this.verticalAcceleration = (((this.origin.z - this.dest.z) / arrivalTime) - this.verticalSpeed) / arrivalTime
        Log.debug("maxHeight={0} / verticalSpeed={1} / accel={2}".format(this.height.round().toString(), this.verticalSpeed.round().toString(), this.verticalAcceleration.round().toString()))

        //
        this.previousDistance = 0
        this.previousHeight = this.origin.z
        
        /*this.a = this.arc
        this.b = ((this.origin.z - this.dest.z) / arrivalTime) - (this.a * arrivalTime)*/
        //Log.debug("Projectile : a=" + this.a.toString(1) + " b=" + this.b.toString(1))

        super.launch()
    
    /** Update the projectile position and returns true if it exploded */
    override function move() returns boolean
        let timeElapsed = TimeDilatation.getModifiedTime(this.fx.getDummy().getPos3Real()) - this.launchTime
        
        // Check impact
        //Log.trace("Projectile pos : " + pos.toString() + " -> target " + projectile.dest.toString())
        if timeElapsed >= this.arrivalTime
            // BOOM !
            if this.impactHandler != null
                this.impactHandler.onImpact(this.dest)
            return true

        // Compute XY
        let distance = this.speed * timeElapsed
        vec2 posXY = this.origin.toVec2().polarOffset(this.groundAngle, distance)

        // Compute Z
        let posZ = this.verticalAcceleration * timeElapsed * timeElapsed + this.verticalSpeed * timeElapsed + this.origin.z

        // Compute Z angle
        let zAngle = vec2(distance - this.previousDistance, posZ - this.previousHeight)

        // Update location (DO NOT USE fx.setZ !)
        vec3 posXYZ = posXY.withZ(posZ)
        this.fx.setXYZ(posXYZ, false)
        this.fx.setZAngle(zAngle.getAngle())

        this.previousDistance = distance
        this.previousHeight = posZ

        // Not destroyed
        return false

/** A projectile following a specific unit */
public class FollowingProjectile extends Projectile
    // Physics
    protected unit target
    protected real speed = 200.0

    // Temporary
    private real previousMoveTime
    private vec3 previousPosition

    construct(unit emitter, string effectPath, vec3 origin, unit target)
        super(emitter, effectPath, origin)
        this.target = target
        this.previousPosition = origin
    
    ondestroy
    
    // Modifiers
    function setTarget(unit target)
        this.target = target

    function setSpeed(real speed)
        this.speed = speed

    // Functions
    /** Starts the trajectory and effects of the projectile */
    override function launch()
        this.previousMoveTime = TimeDilatation.getModifiedTime(this.previousPosition)
        super.launch()
    
    /** Update the projectile position and returns true if it exploded */
    override function move() returns boolean
        let currentTime = TimeDilatation.getModifiedTime(this.previousPosition)
        let intervalTime = currentTime - this.previousMoveTime

        // Distance at this step
        let targetPoint = this.target.getPos3Real() + vec3(0, 0, 64.0)
        let moveDistance = this.speed * intervalTime

        // Check impact
        if this.previousPosition.distanceToSq(targetPoint) <= moveDistance * moveDistance
            // BOOM !
            if this.impactHandler != null
                this.impactHandler.onImpact(this.target.getPos3Real())
            return true
        
        let angleGround = this.previousPosition.toVec2().angleTo(targetPoint.toVec2())
        let groundDistance = this.previousPosition.toVec2().distanceTo(targetPoint.toVec2())
        let angleAir = vec2(groundDistance, targetPoint.z - this.previousPosition.z).getAngle()
        let posXYZ = this.previousPosition.polarProject(moveDistance, angleGround, angleAir)
        //Log.trace("Angle ground = {0} / Angle air = {1}".format(angleGround.degrees().round().toString(), angleAir.degrees().round().toString()))
        
        // Update location (DO NOT USE fx.setZ !)
        this.fx.setXYZ(posXYZ, false)
        this.fx.setXYAngle(angleGround)
        this.fx.setZAngle(angleAir)

        this.previousPosition = posXYZ
        this.previousMoveTime = currentTime

        // Not destroyed
        return false

init
    // Periodically handle projectiles movement and impacts
    doPeriodically(PROJECTILES_UPDATE_PERIOD) cb ->
        let iter = Projectile.LIST.iterator()
        while iter.hasNext()
            Projectile projectile = iter.next()
            
            if projectile.move()
                destroy projectile
                iter.remove()
