package Initialization

// Standard imports

// Custom imports
import Musics

public interface UnitFilter
    function isValid(unit u) returns boolean

public class GenericUnitFilter implements UnitFilter
    constant int unitTypeId
    constant player owner

    construct(int unitTypeId)
        this.unitTypeId = unitTypeId
        this.owner = null

    construct(int unitTypeId, player owner)
        this.unitTypeId = unitTypeId
        this.owner = owner
    
    function isValid(unit u) returns boolean
        boolean valid = u != null
            and (this.unitTypeId == 0 or u.getTypeId() == this.unitTypeId)
            and (this.owner == null or u.getOwner() == this.owner)

        //Log.trace(u.getName() + " is valid for filter ? " + valid.toString() + " : " + u.getTypeId().toString())
        return valid

/** Fill a group of units in <area> matching the criterion <filter>.
Returns the number of units matched. */
public function findUnitsInRectMatching(group gp, rect area, UnitFilter filter) returns int
    return findUnitsInRectMatching(gp, area, filter, INT_MAX)

/** Fill a group with at most <maxCount> units in <area> matching the criterion <filter>.
Returns the number of units matched. */
public function findUnitsInRectMatching(group gp, rect area, UnitFilter filter, int maxCount) returns int
    gp.clear()
    gp.enumUnitsInRect(area)

    int count = 0
    let iter = gp.iterator()
    while iter.hasNext()
        unit u = iter.next()
        if filter.isValid(u) and (maxCount == 0 or count < maxCount)
            count++
        else
            gp.removeUnit(u)

    return count

/** Fill a group with at most <maxCount> units in <area> matching the criterion <filter>.
Returns the number of units matched. */
public function findUnitsInGroupMatching(group gp, UnitFilter filter, int maxCount) returns group
    group results = CreateGroup()

    int count = 0
    let iter = gp.iterator()
    while iter.hasNext() and (maxCount == 0 or count < maxCount)
        unit u = iter.next()
        if filter.isValid(u) 
            results.addUnit(u)
            count++

    return results

/** Returns the first unit found on the map that matches a criterion */
public function findFirstUnitInGroupMatching(group gp, UnitFilter filter) returns unit
    let iter = gp.iterator()
    while iter.hasNext()
        unit u = iter.next()
        if filter.isValid(u) 
            return u
    return null

/** Returns the first unit found on the map that matches a criterion */
public function findFirstUnitMatching(UnitFilter filter) returns unit
    group gp = CreateGroup()
    findUnitsInRectMatching(gp, GetPlayableMapRect(), filter, 1)
    unit result = gp.next()
    DestroyGroup(gp)
    return result

init
    // Minimap properties
    FogEnableOn()
    FogMaskEnableOn()
    SetCreepCampFilterState(false)
    EnableMinimapFilterButtons(true, false)

    // Game time speed
    SetTimeOfDayScale(1.0)
    SetTimeOfDay(8.00)
    SuspendTimeOfDay(false)

    // Music
    Music.MUSIC_TOWN.loopMusic(false)
